{"ast":null,"code":"var _jsxFileName = \"/Users/vigneshgs/fokus/src/components/TaskBoard/TaskLabelSelect.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:${p => p.theme.backgroundSecondary};\n    color:${p => p.theme.primaryText};\n    option{\n        font-weight:bold;\n    }\n`;\n_c = TaskSelectInput;\nexport default function TaskLabel(p) {\n  _s();\n  const labels = useSelector(s => s.tasks.labels);\n  const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n  return (\n    /*#__PURE__*/\n    // <div style={{ height: \"100%\", width: 80 }}>\n    _jsxDEV(TaskSelectInput, {\n      autoFocus: true,\n      name: \"labels\",\n      onBlur: () => p.onBlur(p.taskId, p.taskLabel, updatedLabel),\n      defaultValue: updatedLabel,\n      onChange: e => setUpdatedLabel(e.target.value),\n      onKeyDown: e => e.key === \"Enter\" ? p.onBlur(p.taskId, p.taskLabel, updatedLabel) : null,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"none\",\n        children: \"none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), Object.keys(labels).map((e, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n        style: {\n          color: `${labels[e].color}`\n        },\n        value: e,\n        children: e\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)\n    // </div>\n  );\n}\n_s(TaskLabel, \"VzodE49GiSehTscUNe8t1z9tTZw=\", false, function () {\n  return [useSelector];\n});\n_c2 = TaskLabel;\nvar _c, _c2;\n$RefreshReg$(_c, \"TaskSelectInput\");\n$RefreshReg$(_c2, \"TaskLabel\");","map":{"version":3,"names":["React","useState","useSelector","useDispatch","styled","jsxDEV","_jsxDEV","TaskSelectInput","select","p","theme","backgroundSecondary","primaryText","_c","TaskLabel","_s","labels","s","tasks","updatedLabel","setUpdatedLabel","taskLabel","autoFocus","name","onBlur","taskId","defaultValue","onChange","e","target","value","onKeyDown","key","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","idx","style","color","_c2","$RefreshReg$"],"sources":["/Users/vigneshgs/fokus/src/components/TaskBoard/TaskLabelSelect.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:${p=>p.theme.backgroundSecondary};\n    color:${p=>p.theme.primaryText};\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,eAAe,GAAGH,MAAM,CAACI,MAAO;AACtC;AACA;AACA;AACA,uBAAuBC,CAAC,IAAEA,CAAC,CAACC,KAAK,CAACC,mBAAoB;AACtD,YAAYF,CAAC,IAAEA,CAAC,CAACC,KAAK,CAACE,WAAY;AACnC;AACA;AACA;AACA,CAAC;AAACC,EAAA,GATIN,eAAe;AAWrB,eAAe,SAASO,SAASA,CAACL,CAAC,EAAE;EAAAM,EAAA;EACjC,MAAMC,MAAM,GAAGd,WAAW,CAAEe,CAAC,IAAKA,CAAC,CAACC,KAAK,CAACF,MAAM,CAAC;EACjD,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAACQ,CAAC,CAACY,SAAS,CAAC;EAE7D;IAAA;IACI;IACAf,OAAA,CAACC,eAAe;MAChBe,SAAS;MACLC,IAAI,EAAC,QAAQ;MACbC,MAAM,EAAEA,CAAA,KAAMf,CAAC,CAACe,MAAM,CAACf,CAAC,CAACgB,MAAM,EAAChB,CAAC,CAACY,SAAS,EAAEF,YAAY,CAAE;MAC3DO,YAAY,EAAEP,YAAa;MAC3BQ,QAAQ,EAAGC,CAAC,IAAKR,eAAe,CAACQ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MACjDC,SAAS,EAAGH,CAAC,IAAMA,CAAC,CAACI,GAAG,KAAK,OAAO,GAAGvB,CAAC,CAACe,MAAM,CAACf,CAAC,CAACgB,MAAM,EAAChB,CAAC,CAACY,SAAS,EAAEF,YAAY,CAAC,GAAG,IAAM;MAAAc,QAAA,gBAE5F3B,OAAA;QAAQwB,KAAK,EAAC,MAAM;QAAAG,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAEjCC,MAAM,CAACC,IAAI,CAACvB,MAAM,CAAC,CAACwB,GAAG,CAAC,CAACZ,CAAC,EAAEa,GAAG,kBAC5BnC,OAAA;QAAQoC,KAAK,EAAE;UAACC,KAAK,EAAE,GAAE3B,MAAM,CAACY,CAAC,CAAC,CAACe,KAAM;QAAC,CAAE;QAAWb,KAAK,EAAEF,CAAE;QAAAK,QAAA,EAC3DL;MAAC,GAD4Ca,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE7C,CACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;IACjB;EAAA;AAER;AAACtB,EAAA,CAxBuBD,SAAS;EAAA,QACdZ,WAAW;AAAA;AAAA0C,GAAA,GADN9B,SAAS;AAAA,IAAAD,EAAA,EAAA+B,GAAA;AAAAC,YAAA,CAAAhC,EAAA;AAAAgC,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module"}