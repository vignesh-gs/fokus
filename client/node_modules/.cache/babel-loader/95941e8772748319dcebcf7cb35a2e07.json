{"ast":null,"code":"var _jsxFileName = \"/Users/vigneshgs/fokus/src/components/TaskBoard/TaskFeedback.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { debounce, getFormattedListTimeSummary } from \"../../helpers\";\nimport { FaClock } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskFeedbackContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 80%;\n    margin: 0 0 10px 0;\n`;\n_c = TaskFeedbackContainer;\nconst RemainingTaskListTimeDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color:${p => p.theme.primaryText};\n    p {\n        margin: 0 3px;\n        font-weight: bold;\n        font-size: 0.8em;\n    }\n    svg {\n        font-size: 0.8em;\n        margin: 0 3px;\n    }\n    span {\n        margin: 0 2px;\n        font-size: 0.8em;\n    }\n`;\n_c2 = RemainingTaskListTimeDiv;\nconst ErrorMessage = styled.div`\n    display: flex;\n    align-items: center;\n    color: red;\n    p {\n        margin: 0;\n        font-size: 0.8em;\n    }\n`;\n_c3 = ErrorMessage;\nexport function TaskFeedback(_ref) {\n  _s();\n  let {\n    task,\n    time,\n    setInputValid\n  } = _ref;\n  let [error, setError] = useState(undefined);\n  useEffect(() => {\n    let errorGenerated = false;\n    if (task !== undefined) {\n      var _temp, _temp2, _temp3, _temp4;\n      // if time is there, it should be stripped and validated first before the actual task content\n      let temp = task === null || task === void 0 ? void 0 : task.trim().split(\" \");\n      if (temp !== undefined && !isNaN(parseInt(temp[temp.length - 1]))) {\n        let taskTime = parseInt(temp.pop());\n        if (taskTime <= 0) {\n          setError(\"Hmmm. Time for this task seems weird,no?\");\n          errorGenerated = true;\n          setInputValid(false);\n          return;\n        } else if (taskTime > 120) {\n          setError(\"Time should be <120mins for better focus !\");\n          errorGenerated = true;\n          setInputValid(false);\n          return;\n        }\n      }\n      temp = (_temp = temp) === null || _temp === void 0 ? void 0 : _temp.join(\" \");\n      if (((_temp2 = temp) === null || _temp2 === void 0 ? void 0 : _temp2.length) === 0) {\n        setError(undefined);\n        errorGenerated = true;\n        setInputValid(false);\n      } else if (((_temp3 = temp) === null || _temp3 === void 0 ? void 0 : _temp3.length) < 3) {\n        setError(\"Task should be atleast 3 characters long.\");\n        errorGenerated = true;\n        setInputValid(false);\n      } else if (((_temp4 = temp) === null || _temp4 === void 0 ? void 0 : _temp4.length) > 100) {\n        setError(\"Hey, that's too long. Keep it short and simple.\");\n        errorGenerated = true;\n        setInputValid(false);\n      } else {\n        setError(undefined);\n        setInputValid(true);\n      }\n    }\n    if (!errorGenerated) {\n      // will check for error in time only if no error in task\n      if (time !== undefined && time !== \"\") {\n        let numericTime = parseInt(time);\n        if (numericTime <= 0 || numericTime > 120) {\n          setError(\"Time should be between 1-120 mins\");\n          setInputValid(false);\n        } else {\n          setError(undefined);\n          setInputValid(true);\n        }\n      }\n    }\n  }, [task, time, setInputValid]);\n  const remainingTaskListTime = useSelector(s => s.tasks.meta.remainingTaskListTime);\n  const rTLTObj = getFormattedListTimeSummary(remainingTaskListTime);\n  let rTLTHours = rTLTObj.hours;\n  let rTLTMins = rTLTObj.mins;\n  return /*#__PURE__*/_jsxDEV(TaskFeedbackContainer, {\n    children: error === undefined ? /*#__PURE__*/_jsxDEV(RemainingTaskListTimeDiv, {\n      children: remainingTaskListTime === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Create New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaClock, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"list time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }, this), rTLTHours !== \"0\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [rTLTHours, \"h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 51\n        }, this), rTLTMins !== \"00\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [rTLTMins, \"m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskFeedback, \"KKR+AiUMP/pXenMZHkpzv6e8Vj4=\", false, function () {\n  return [useSelector];\n});\n_c4 = TaskFeedback;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TaskFeedbackContainer\");\n$RefreshReg$(_c2, \"RemainingTaskListTimeDiv\");\n$RefreshReg$(_c3, \"ErrorMessage\");\n$RefreshReg$(_c4, \"TaskFeedback\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","styled","debounce","getFormattedListTimeSummary","FaClock","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskFeedbackContainer","div","_c","RemainingTaskListTimeDiv","p","theme","primaryText","_c2","ErrorMessage","_c3","TaskFeedback","_ref","_s","task","time","setInputValid","error","setError","undefined","errorGenerated","_temp","_temp2","_temp3","_temp4","temp","trim","split","isNaN","parseInt","length","taskTime","pop","join","numericTime","remainingTaskListTime","s","tasks","meta","rTLTObj","rTLTHours","hours","rTLTMins","mins","children","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["/Users/vigneshgs/fokus/src/components/TaskBoard/TaskFeedback.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { debounce, getFormattedListTimeSummary } from \"../../helpers\";\nimport { FaClock } from \"react-icons/fa\";\n\nconst TaskFeedbackContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 80%;\n    margin: 0 0 10px 0;\n`;\n\nconst RemainingTaskListTimeDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color:${p=>p.theme.primaryText};\n    p {\n        margin: 0 3px;\n        font-weight: bold;\n        font-size: 0.8em;\n    }\n    svg {\n        font-size: 0.8em;\n        margin: 0 3px;\n    }\n    span {\n        margin: 0 2px;\n        font-size: 0.8em;\n    }\n`;\n\nconst ErrorMessage = styled.div`\n    display: flex;\n    align-items: center;\n    color: red;\n    p {\n        margin: 0;\n        font-size: 0.8em;\n    }\n`;\n\nexport function TaskFeedback({ task, time, setInputValid }) {\n    let [error, setError] = useState(undefined);\n\n    useEffect(() => {\n        let errorGenerated = false;\n        if (task !== undefined) {\n            // if time is there, it should be stripped and validated first before the actual task content\n            let temp = task?.trim().split(\" \");\n            if (temp !== undefined && !isNaN(parseInt(temp[temp.length - 1]))) {\n                let taskTime = parseInt(temp.pop());\n                if (taskTime <= 0) {\n                    setError(\"Hmmm. Time for this task seems weird,no?\");\n                    errorGenerated = true;\n                    setInputValid(false);\n                    return;\n                } else if (taskTime > 120) {\n                    setError(\"Time should be <120mins for better focus !\");\n                    errorGenerated = true;\n                    setInputValid(false);\n                    return;\n                }\n            }\n            temp = temp?.join(\" \");\n\n            if (temp?.length === 0) {\n                setError(undefined);\n                errorGenerated = true;\n                setInputValid(false);\n            } else if (temp?.length < 3) {\n                setError(\"Task should be atleast 3 characters long.\");\n                errorGenerated = true;\n                setInputValid(false);\n            } else if (temp?.length > 100) {\n                setError(\"Hey, that's too long. Keep it short and simple.\");\n                errorGenerated = true;\n                setInputValid(false);\n            } else {\n                setError(undefined);\n                setInputValid(true);\n            }\n        }\n\n        if (!errorGenerated) {\n            // will check for error in time only if no error in task\n            if (time !== undefined && time !== \"\") {\n                let numericTime = parseInt(time);\n                if (numericTime <= 0 || numericTime > 120) {\n                    setError(\"Time should be between 1-120 mins\");\n                    setInputValid(false);\n                } else {\n                    setError(undefined);\n                    setInputValid(true);\n                }\n            }\n        }\n    }, [task, time, setInputValid]);\n\n    const remainingTaskListTime = useSelector((s) => s.tasks.meta.remainingTaskListTime);\n    const rTLTObj = getFormattedListTimeSummary(remainingTaskListTime);\n    let rTLTHours = rTLTObj.hours;\n    let rTLTMins = rTLTObj.mins;\n\n    return (\n        <TaskFeedbackContainer>\n            {error === undefined ? (\n                <RemainingTaskListTimeDiv>\n                    {remainingTaskListTime === 0 ? (\n                        <p>Create New Task</p>\n                    ) : (\n                        <>\n                            <FaClock />\n                            <p>list time:</p>\n                            {rTLTHours !== \"0\" && <span>{rTLTHours}h</span>}\n                            {rTLTMins !== \"00\" && <span>{rTLTMins}m</span>}\n                        </>\n                    )}\n                </RemainingTaskListTimeDiv>\n            ) : (\n                <ErrorMessage>\n                    <p>{error}</p>\n                </ErrorMessage>\n            )}\n        </TaskFeedbackContainer>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,QAAQ,EAAEC,2BAA2B,QAAQ,eAAe;AACrE,SAASC,OAAO,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzC,MAAMC,qBAAqB,GAAGR,MAAM,CAACS,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,qBAAqB;AAQ3B,MAAMG,wBAAwB,GAAGX,MAAM,CAACS,GAAI;AAC5C;AACA;AACA;AACA,YAAYG,CAAC,IAAEA,CAAC,CAACC,KAAK,CAACC,WAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAlBIJ,wBAAwB;AAoB9B,MAAMK,YAAY,GAAGhB,MAAM,CAACS,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACQ,GAAA,GARID,YAAY;AAUlB,OAAO,SAASE,YAAYA,CAAAC,IAAA,EAAgC;EAAAC,EAAA;EAAA,IAA/B;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAc,CAAC,GAAAJ,IAAA;EACtD,IAAI,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC4B,SAAS,CAAC;EAE3C7B,SAAS,CAAC,MAAM;IACZ,IAAI8B,cAAc,GAAG,KAAK;IAC1B,IAAIN,IAAI,KAAKK,SAAS,EAAE;MAAA,IAAAE,KAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,MAAA;MACpB;MACA,IAAIC,IAAI,GAAGX,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEY,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;MAClC,IAAIF,IAAI,KAAKN,SAAS,IAAI,CAACS,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACA,IAAI,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;QAC/D,IAAIC,QAAQ,GAAGF,QAAQ,CAACJ,IAAI,CAACO,GAAG,CAAC,CAAC,CAAC;QACnC,IAAID,QAAQ,IAAI,CAAC,EAAE;UACfb,QAAQ,CAAC,0CAA0C,CAAC;UACpDE,cAAc,GAAG,IAAI;UACrBJ,aAAa,CAAC,KAAK,CAAC;UACpB;QACJ,CAAC,MAAM,IAAIe,QAAQ,GAAG,GAAG,EAAE;UACvBb,QAAQ,CAAC,4CAA4C,CAAC;UACtDE,cAAc,GAAG,IAAI;UACrBJ,aAAa,CAAC,KAAK,CAAC;UACpB;QACJ;MACJ;MACAS,IAAI,IAAAJ,KAAA,GAAGI,IAAI,cAAAJ,KAAA,uBAAJA,KAAA,CAAMY,IAAI,CAAC,GAAG,CAAC;MAEtB,IAAI,EAAAX,MAAA,GAAAG,IAAI,cAAAH,MAAA,uBAAJA,MAAA,CAAMQ,MAAM,MAAK,CAAC,EAAE;QACpBZ,QAAQ,CAACC,SAAS,CAAC;QACnBC,cAAc,GAAG,IAAI;QACrBJ,aAAa,CAAC,KAAK,CAAC;MACxB,CAAC,MAAM,IAAI,EAAAO,MAAA,GAAAE,IAAI,cAAAF,MAAA,uBAAJA,MAAA,CAAMO,MAAM,IAAG,CAAC,EAAE;QACzBZ,QAAQ,CAAC,2CAA2C,CAAC;QACrDE,cAAc,GAAG,IAAI;QACrBJ,aAAa,CAAC,KAAK,CAAC;MACxB,CAAC,MAAM,IAAI,EAAAQ,MAAA,GAAAC,IAAI,cAAAD,MAAA,uBAAJA,MAAA,CAAMM,MAAM,IAAG,GAAG,EAAE;QAC3BZ,QAAQ,CAAC,iDAAiD,CAAC;QAC3DE,cAAc,GAAG,IAAI;QACrBJ,aAAa,CAAC,KAAK,CAAC;MACxB,CAAC,MAAM;QACHE,QAAQ,CAACC,SAAS,CAAC;QACnBH,aAAa,CAAC,IAAI,CAAC;MACvB;IACJ;IAEA,IAAI,CAACI,cAAc,EAAE;MACjB;MACA,IAAIL,IAAI,KAAKI,SAAS,IAAIJ,IAAI,KAAK,EAAE,EAAE;QACnC,IAAImB,WAAW,GAAGL,QAAQ,CAACd,IAAI,CAAC;QAChC,IAAImB,WAAW,IAAI,CAAC,IAAIA,WAAW,GAAG,GAAG,EAAE;UACvChB,QAAQ,CAAC,mCAAmC,CAAC;UAC7CF,aAAa,CAAC,KAAK,CAAC;QACxB,CAAC,MAAM;UACHE,QAAQ,CAACC,SAAS,CAAC;UACnBH,aAAa,CAAC,IAAI,CAAC;QACvB;MACJ;IACJ;EACJ,CAAC,EAAE,CAACF,IAAI,EAAEC,IAAI,EAAEC,aAAa,CAAC,CAAC;EAE/B,MAAMmB,qBAAqB,GAAG3C,WAAW,CAAE4C,CAAC,IAAKA,CAAC,CAACC,KAAK,CAACC,IAAI,CAACH,qBAAqB,CAAC;EACpF,MAAMI,OAAO,GAAG5C,2BAA2B,CAACwC,qBAAqB,CAAC;EAClE,IAAIK,SAAS,GAAGD,OAAO,CAACE,KAAK;EAC7B,IAAIC,QAAQ,GAAGH,OAAO,CAACI,IAAI;EAE3B,oBACI7C,OAAA,CAACG,qBAAqB;IAAA2C,QAAA,EACjB3B,KAAK,KAAKE,SAAS,gBAChBrB,OAAA,CAACM,wBAAwB;MAAAwC,QAAA,EACpBT,qBAAqB,KAAK,CAAC,gBACxBrC,OAAA;QAAA8C,QAAA,EAAG;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAEtBlD,OAAA,CAAAE,SAAA;QAAA4C,QAAA,gBACI9C,OAAA,CAACF,OAAO;UAAAiD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXlD,OAAA;UAAA8C,QAAA,EAAG;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EAChBR,SAAS,KAAK,GAAG,iBAAI1C,OAAA;UAAA8C,QAAA,GAAOJ,SAAS,EAAC,GAAC;QAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EAC9CN,QAAQ,KAAK,IAAI,iBAAI5C,OAAA;UAAA8C,QAAA,GAAOF,QAAQ,EAAC,GAAC;QAAA;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,eAChD;IACL;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACqB,CAAC,gBAE3BlD,OAAA,CAACW,YAAY;MAAAmC,QAAA,eACT9C,OAAA;QAAA8C,QAAA,EAAI3B;MAAK;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EACjB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAEhC;AAACnC,EAAA,CApFeF,YAAY;EAAA,QAyDMnB,WAAW;AAAA;AAAAyD,GAAA,GAzD7BtC,YAAY;AAAA,IAAAR,EAAA,EAAAK,GAAA,EAAAE,GAAA,EAAAuC,GAAA;AAAAC,YAAA,CAAA/C,EAAA;AAAA+C,YAAA,CAAA1C,GAAA;AAAA0C,YAAA,CAAAxC,GAAA;AAAAwC,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module"}