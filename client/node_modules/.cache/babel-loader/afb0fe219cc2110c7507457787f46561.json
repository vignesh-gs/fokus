{"ast":null,"code":"var _jsxFileName = \"/Users/vigneshgs/fokus/src/components/TaskBoard/TaskInput.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\nimport { TaskFeedback } from \"./TaskFeedback\";\nimport { debounce } from \"../../helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px 0 10px 0;\n    width: 90%;\n    max-width: 396px;\n    border-radius: 10px;\n    background-color: ${p => p.theme.backgroundSecondary};\n    height: 50px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n`;\n_c = TaskInputContainer;\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #fabb18;\n    }\n`;\n_c2 = TaskContentInputDiv;\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: ${p => p.theme.backgroundSecondary};\n    color: ${p => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n_c3 = TaskContentInputField;\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.7em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #fabb18;\n    }\n`;\n_c4 = TaskTimeInputDiv;\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: ${p => p.theme.backgroundSecondary};\n    color: ${p => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n        input[type=\"number\"] { \n        -moz-appearance: textfield;   \n    }\n`;\n_c5 = TaskTimeInputField;\nexport default function TaskInput() {\n  _s();\n  const defaultTime = useSelector(s => s.settings.defaultTime);\n  const defaultLabel = useSelector(s => s.settings.defaultLabel);\n  const [task, setTask] = useState(\"\");\n  const [time, setTime] = useState(defaultTime);\n  const [generateFeedbackForTask, setGenerateFeedbackForTask] = useState(undefined);\n  const [generateFeedbackForTime, setGenerateFeedbackForTime] = useState(undefined);\n  const [isInputValid, setInputValid] = useState(false);\n  let taskContentInputRef, taskTimeInputRef;\n  const meta = useSelector(s => s.tasks.meta);\n  const labels = useSelector(s => s.tasks.labels);\n  const dispatch = useDispatch();\n  function submitTask(e) {\n    if (e.key === \"Enter\" && task.trim().length >= 1 && isInputValid) {\n      let temp = task.trim().split(\" \");\n      // add a max time limit\n      let taskTime = time;\n      let label = defaultLabel;\n      if (temp.length !== 1) {\n        if (!isNaN(parseInt(temp[temp.length - 1]))) {\n          taskTime = parseInt(temp.pop());\n        } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\n          let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n          let found = false;\n          for (let validLabel in labels) {\n            found = validLabel.includes(userLabel);\n            console.log(userLabel, validLabel);\n            if (found) {\n              label = validLabel;\n              temp.pop();\n              break;\n            }\n          }\n        }\n      }\n      temp = temp.join(\" \");\n      let newTask = {\n        id: Math.floor(Math.random() * 10000),\n        globalKey: meta.globalKey,\n        content: temp,\n        time: taskTime,\n        remainingTime: taskTime,\n        isRunning: false,\n        isCompleted: false,\n        createdAt: new Date().toISOString(),\n        label: label\n      };\n      if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n      dispatch(create(newTask));\n      dispatch(incrementGlobalKey());\n      if (label !== null) dispatch(updateLabelCount({\n        oldLabel: null,\n        newLabel: label\n      }));\n      setTask(\"\");\n      setTime(defaultTime);\n      taskContentInputRef.value = \"\";\n      taskTimeInputRef.value = \"\";\n      taskContentInputRef.focus();\n    }\n  }\n  const debouncedGenerateInputFeedback = useCallback(debounce((task, time) => {\n    if (task !== undefined) setGenerateFeedbackForTask(task);\n    if (time !== undefined) setGenerateFeedbackForTime(time);\n  }, 150), []);\n  function onTaskInputChangeHandler(task) {\n    setTask(task);\n    debouncedGenerateInputFeedback(task, undefined);\n  }\n  function onTimeInputChangeHandler(time) {\n    setTime(time);\n    debouncedGenerateInputFeedback(undefined, time);\n  }\n\n  // improve logic - both onKeyDown and onChange executing - combining will be better.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TaskInputContainer, {\n      children: [/*#__PURE__*/_jsxDEV(TaskContentInputDiv, {\n        children: [/*#__PURE__*/_jsxDEV(AiFillPlusCircle, {\n          onClick: () => taskContentInputRef.focus()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TaskContentInputField, {\n          type: \"text\",\n          placeholder: \"i have to focus on ...\",\n          ref: el => taskContentInputRef = el,\n          onChange: e => onTaskInputChangeHandler(e.target.value),\n          onKeyDown: submitTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TaskTimeInputDiv, {\n        children: [/*#__PURE__*/_jsxDEV(AiFillClockCircle, {\n          onClick: () => taskTimeInputRef.focus()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TaskTimeInputField, {\n          type: \"number\",\n          placeholder: defaultTime,\n          ref: el => taskTimeInputRef = el,\n          onChange: e => onTimeInputChangeHandler(e.target.value),\n          onKeyDown: submitTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"mins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskFeedback, {\n      task: generateFeedbackForTask,\n      time: generateFeedbackForTime,\n      setInputValid: setInputValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(TaskInput, \"Po0fiNKpSBrMowBx1vCEOSqhbOA=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n_c6 = TaskInput;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"TaskInputContainer\");\n$RefreshReg$(_c2, \"TaskContentInputDiv\");\n$RefreshReg$(_c3, \"TaskContentInputField\");\n$RefreshReg$(_c4, \"TaskTimeInputDiv\");\n$RefreshReg$(_c5, \"TaskTimeInputField\");\n$RefreshReg$(_c6, \"TaskInput\");","map":{"version":3,"names":["React","useCallback","useState","useDispatch","useSelector","create","incrementGlobalKey","focusOnTask","updateLabelCount","styled","AiFillPlusCircle","AiFillClockCircle","TaskFeedback","debounce","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskInputContainer","div","p","theme","backgroundSecondary","_c","TaskContentInputDiv","_c2","TaskContentInputField","input","primaryText","_c3","TaskTimeInputDiv","_c4","TaskTimeInputField","_c5","TaskInput","_s","defaultTime","s","settings","defaultLabel","task","setTask","time","setTime","generateFeedbackForTask","setGenerateFeedbackForTask","undefined","generateFeedbackForTime","setGenerateFeedbackForTime","isInputValid","setInputValid","taskContentInputRef","taskTimeInputRef","meta","tasks","labels","dispatch","submitTask","e","key","trim","length","temp","split","taskTime","label","isNaN","parseInt","pop","includes","userLabel","substring","toLowerCase","found","validLabel","console","log","join","newTask","id","Math","floor","random","globalKey","content","remainingTime","isRunning","isCompleted","createdAt","Date","toISOString","focussedTaskIndex","oldLabel","newLabel","value","focus","debouncedGenerateInputFeedback","onTaskInputChangeHandler","onTimeInputChangeHandler","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","ref","el","onChange","target","onKeyDown","_c6","$RefreshReg$"],"sources":["/Users/vigneshgs/fokus/src/components/TaskBoard/TaskInput.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\nimport { TaskFeedback } from \"./TaskFeedback\";\nimport { debounce } from \"../../helpers\";\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px 0 10px 0;\n    width: 90%;\n    max-width: 396px;\n    border-radius: 10px;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    height: 50px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #fabb18;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.7em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #fabb18;\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n        input[type=\"number\"] { \n        -moz-appearance: textfield;   \n    }\n`;\n\nexport default function TaskInput() {\n\n    const defaultTime = useSelector((s) => s.settings.defaultTime);\n    const defaultLabel = useSelector((s) => s.settings.defaultLabel);\n\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(defaultTime);\n\n    const [generateFeedbackForTask, setGenerateFeedbackForTask] = useState(undefined);\n    const [generateFeedbackForTime, setGenerateFeedbackForTime] = useState(undefined);\n    const [isInputValid,setInputValid] = useState(false);\n\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((s) => s.tasks.meta);\n    const labels = useSelector((s) => s.tasks.labels);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1 && isInputValid) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            let label = defaultLabel;\n            if (temp.length !== 1) {\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\n                    taskTime = parseInt(temp.pop());\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n                    let found = false;\n                    for (let validLabel in labels) {\n                        found = validLabel.includes(userLabel);\n                        console.log(userLabel, validLabel);\n                        if (found) {\n                            label = validLabel;\n                            temp.pop();\n                            break;\n                        }\n                    }\n                }\n            }\n\n            temp = temp.join(\" \");\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime,\n                remainingTime: taskTime,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n                label: label,\n            };\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\n            setTask(\"\");\n            setTime(defaultTime);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    const debouncedGenerateInputFeedback = useCallback(\n        debounce((task, time) => {\n            if (task !== undefined) setGenerateFeedbackForTask(task);\n            if (time !== undefined) setGenerateFeedbackForTime(time);\n        }, 150),\n        []\n    );\n\n    function onTaskInputChangeHandler(task) {\n        setTask(task);\n        debouncedGenerateInputFeedback(task, undefined);\n    }\n\n    function onTimeInputChangeHandler(time) {\n        setTime(time);\n        debouncedGenerateInputFeedback(undefined, time);\n    }\n\n    // improve logic - both onKeyDown and onChange executing - combining will be better.\n    return (\n        <>\n            <TaskInputContainer>\n                <TaskContentInputDiv>\n                    <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\n                    <TaskContentInputField\n                        type=\"text\"\n                        placeholder=\"i have to focus on ...\"\n                        ref={(el) => (taskContentInputRef = el)}\n                        onChange={(e) => onTaskInputChangeHandler(e.target.value)}\n                        onKeyDown={submitTask}\n                    />\n                </TaskContentInputDiv>\n                <TaskTimeInputDiv>\n                    <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\n                    <TaskTimeInputField\n                        type=\"number\"\n                        placeholder={defaultTime}\n                        ref={(el) => (taskTimeInputRef = el)}\n                        onChange={(e) => onTimeInputChangeHandler(e.target.value)}\n                        onKeyDown={submitTask}\n                    />\n                    <span>mins</span>\n                </TaskTimeInputDiv>\n            </TaskInputContainer>\n            <TaskFeedback task={generateFeedbackForTask} time={generateFeedbackForTime} setInputValid={setInputValid}/>\n        </>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}