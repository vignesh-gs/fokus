{"ast":null,"code":"var _jsxFileName = \"/Users/vigneshgs/fokus/client/src/containers/taskBoard/TaskBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    min-width: 396px;\n    flex-direction: column;\n    align-items: center;\n    overflow-y: scroll; // to enable scrolling by default for this flex-container only\n`;\n_c = TaskBoardContainer;\nconst EmptySpace = styled.div`\n    display: flex;\n    min-width: 10px;\n    min-height: 10px;\n    margin: 10px;\n`;\n_c2 = EmptySpace;\nexport function TaskBoard() {\n  _s();\n  const tasks = useSelector(state => state.tasks.taskArray);\n  const meta = useSelector(state => state.tasks.meta);\n  let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n  const dispatch = useDispatch();\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    let items = [...tasks.map(i => ({\n      ...i\n    }))];\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    let i = result.source.index;\n    let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n    // below is logic to reset globalKeys to maintain correct sort order.\n    while (i != result.destination.index) {\n      if (direction) {\n        items[i].globalKey = tasks[i].globalKey;\n        i++;\n      } else {\n        items[i].globalKey = tasks[i].globalKey;\n        i--;\n      }\n      if (i == result.destination.index) {\n        items[i].globalKey = tasks[i].globalKey;\n      }\n    }\n    if (meta.focussedTaskIndex !== -1) {\n      let greaterIndex = Math.max(result.destination.index, result.source.index);\n      let smallerIndex = Math.min(result.destination.index, result.source.index);\n      if (result.source.index === meta.focussedTaskIndex) {\n        dispatch(focusOnTask(result.destination.index));\n      } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n        if (result.destination.index > result.source.index) {\n          dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n        } else {\n          dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n        }\n      }\n    }\n\n    dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n  }\n\n  function getFlipKey() {\n    let flipKey = \"\";\n    tasks.forEach(i => {\n      flipKey += `${i.globalKey}`;\n    });\n    flipKey += `${meta.completedTaskStartIndex}`;\n    return flipKey;\n  }\n  function isFocussed(id) {\n    if (focussedTask !== null && focussedTask.id === id) return true;\n    return false;\n  }\n\n  // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n  return /*#__PURE__*/_jsxDEV(TaskBoardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(TaskInput, {\n      focussedTaskIndex: meta.focussedTaskIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), tasks.length === 0 ? /*#__PURE__*/_jsxDEV(NoTasks, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 35\n    }, this) : tasks.length === meta.completedTasksCount && /*#__PURE__*/_jsxDEV(NoTasks, {\n      allCompleted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 94\n    }, this), /*#__PURE__*/_jsxDEV(Flipper, {\n      flipKey: getFlipKey(),\n      children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: handleOnDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"dropArea\",\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            children: [tasks.map((i, index) => !i.isCompleted ? /*#__PURE__*/_jsxDEV(Draggable, {\n              isDragDisabled: i.isCompleted,\n              draggableId: `${i.id}`,\n              index: index,\n              children: provided2 => /*#__PURE__*/_jsxDEV(TaskCard, {\n                focussedTaskIndex: meta.focussedTaskIndex,\n                focussedTaskGlobalKey: meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1,\n                taskIndex: index,\n                forwardRBDProvided: provided2,\n                task: i,\n                isFocussed: isFocussed(i.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 49\n              }, this)\n            }, i.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 41\n            }, this) : \"\"), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), meta.completedTaskStartIndex !== -1 && /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 57\n      }, this), meta.showCompletedTasks && tasks.map((i, index) => i.isCompleted ? /*#__PURE__*/_jsxDEV(TaskCard, {\n        focussedTaskIndex: meta.focussedTaskIndex,\n        focussedTaskGlobalKey: meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1,\n        taskIndex: index,\n        forwardRBDProvided: {\n          innerRef: null\n        },\n        task: i,\n        isFocussed: isFocussed(i.id)\n      }, i.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 29\n      }, this) : \"\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EmptySpace, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskBoard, \"Jq9p5X2L3bbNXudEsTiLE8kW0f0=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c3 = TaskBoard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TaskBoardContainer\");\n$RefreshReg$(_c2, \"EmptySpace\");\n$RefreshReg$(_c3, \"TaskBoard\");","map":{"version":3,"names":["React","useState","useSelector","useDispatch","updateOrder","TaskCard","DragDropContext","Draggable","Droppable","Flipper","focusOnTask","styled","TaskInput","Divider","NoTasks","jsxDEV","_jsxDEV","TaskBoardContainer","div","_c","EmptySpace","_c2","TaskBoard","_s","tasks","state","taskArray","meta","focussedTask","focussedTaskIndex","dispatch","handleOnDragEnd","result","destination","items","map","i","reorderedItem","splice","source","index","direction","globalKey","greaterIndex","Math","max","smallerIndex","min","getFlipKey","flipKey","forEach","completedTaskStartIndex","isFocussed","id","children","fileName","_jsxFileName","lineNumber","columnNumber","length","completedTasksCount","allCompleted","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","isCompleted","isDragDisabled","draggableId","provided2","focussedTaskGlobalKey","taskIndex","forwardRBDProvided","task","placeholder","showCompletedTasks","_c3","$RefreshReg$"],"sources":["/Users/vigneshgs/fokus/client/src/containers/taskBoard/TaskBoard.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateOrder } from \"./taskBoardSlice\";\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport { focusOnTask } from \"./taskBoardSlice\";\nimport styled from \"styled-components\";\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\nimport Divider from \"./../../components/TaskBoard/Divider\";\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\n\nconst TaskBoardContainer = styled.div`\n    flex: 1 1 0;\n    display: flex;\n    min-width: 396px;\n    flex-direction: column;\n    align-items: center;\n    overflow-y: scroll; // to enable scrolling by default for this flex-container only\n`;\n\nconst EmptySpace = styled.div`\n    display: flex;\n    min-width: 10px;\n    min-height: 10px;\n    margin: 10px;\n`;\n\nexport function TaskBoard() {\n    const tasks = useSelector((state) => state.tasks.taskArray);\n    const meta = useSelector((state) => state.tasks.meta);\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\n    const dispatch = useDispatch();\n\n    function handleOnDragEnd(result) { \n        if (!result.destination) return;\n\n        let items = [...tasks.map((i) => ({ ...i }))];\n        const [reorderedItem] = items.splice(result.source.index, 1);\n        items.splice(result.destination.index, 0, reorderedItem);\n\n        let i = result.source.index;\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\n        // below is logic to reset globalKeys to maintain correct sort order.\n        while (i != result.destination.index) {\n            if (direction) {\n                items[i].globalKey = tasks[i].globalKey;\n                i++;\n            } else {\n                items[i].globalKey = tasks[i].globalKey;\n                i--;\n            }\n            if (i == result.destination.index) {\n                items[i].globalKey = tasks[i].globalKey;\n            }\n        }\n\n        if (meta.focussedTaskIndex !== -1) {\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\n\n            if (result.source.index === meta.focussedTaskIndex) {\n                dispatch(focusOnTask(result.destination.index));\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\n                if (result.destination.index > result.source.index) {\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\n                } else {\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\n                }\n            }\n        }\n\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\n    }\n\n    function getFlipKey() {\n        let flipKey = \"\";\n        tasks.forEach((i) => {\n            flipKey += `${i.globalKey}`;\n        });\n        flipKey += `${meta.completedTaskStartIndex}`;\n        return flipKey;\n    }\n\n    function isFocussed(id) {\n        if (focussedTask !== null && focussedTask.id === id) return true;\n        return false;\n    }\n\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\n\n    return (\n        <TaskBoardContainer>\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\n            <Flipper flipKey={getFlipKey()}>\n                <DragDropContext onDragEnd={handleOnDragEnd}>\n                    <Droppable droppableId=\"dropArea\">\n                        {(provided) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                                {tasks.map((i, index) =>\n                                    !i.isCompleted ? (\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\n                                            {(provided2) => (\n                                                <TaskCard\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                                    taskIndex={index}\n                                                    forwardRBDProvided={provided2}\n                                                    task={i}\n                                                    isFocussed={isFocussed(i.id)}\n                                                />\n                                            )}\n                                        </Draggable>\n                                    ) : (\n                                        \"\"\n                                    )\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\n\n                {meta.showCompletedTasks &&\n                    tasks.map((i, index) =>\n                        i.isCompleted ? (\n                            <TaskCard\n                                focussedTaskIndex={meta.focussedTaskIndex}\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\n                                taskIndex={index}\n                                key={i.id}\n                                forwardRBDProvided={{ innerRef: null }}\n                                task={i}\n                                isFocussed={isFocussed(i.id)}\n                            />\n                        ) : (\n                            \"\"\n                        )\n                    )}\n            </Flipper>\n            <EmptySpace />\n        </TaskBoardContainer>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}