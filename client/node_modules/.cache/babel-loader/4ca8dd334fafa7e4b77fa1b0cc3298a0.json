{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\nimport { updatePageTitle } from \"./../../helpers\";\nconst labelOptions = {\n  work: {\n    color: \"#de1738\",\n    count: 0\n  },\n  personal: {\n    color: \"#89CFF0\",\n    count: 0\n  },\n  fitness: {\n    color: \"#76ff7a\",\n    count: 0\n  },\n  metime: {\n    color: \"#7442c8\",\n    count: 0\n  },\n  explore: {\n    color: \"#efc0fe\",\n    count: 0\n  }\n};\nexport const tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    taskArray: [],\n    labels: labelOptions,\n    soundscape: {\n      track: \"mute\",\n      isPlaying: false,\n      volume: 0.7\n    },\n    meta: {\n      globalKey: 0,\n      completedTaskStartIndex: -1,\n      focussedTaskIndex: -1,\n      showCompletedTasks: true,\n      completedTasksCount: 0,\n      totalTaskListTime: 0,\n      remainingTaskListTime: 0\n    }\n  },\n  reducers: {\n    create: (tasks, _ref) => {\n      let {\n        payload\n      } = _ref;\n      payload.time = payload.time * MIN_TO_MS;\n      payload.remainingTime = payload.remainingTime * MIN_TO_MS;\n      tasks.taskArray.unshift(payload);\n      tasks.meta.totalTaskListTime += payload.time;\n      tasks.meta.remainingTaskListTime += payload.time;\n      if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n    },\n    remove: (tasks, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      tasks.taskArray = tasks.taskArray.filter(i => {\n        if (i.id !== payload) return true;else {\n          if (!i.isCompleted) {\n            if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n          } else {\n            tasks.meta.completedTasksCount--;\n            if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n              tasks.meta.completedTaskStartIndex = -1;\n            }\n          }\n          if (!i.isCompleted) {\n            tasks.meta.remainingTaskListTime -= i.remainingTime;\n          }\n          tasks.meta.totalTaskListTime -= i.time;\n          return false;\n        }\n      });\n    },\n    updateTaskObject: (tasks, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      tasks.taskArray = tasks.taskArray.map(i => i.id === payload.id ? payload : i);\n    },\n    updateTaskContent: (_ref4, _ref5) => {\n      let {\n        taskArray\n      } = _ref4;\n      let {\n        payload\n      } = _ref5;\n      taskArray.forEach(i => {\n        if (i.id === payload.id) {\n          i.content = payload.updatedTaskContent;\n        }\n      });\n    },\n    updateTaskLabel: (_ref6, _ref7) => {\n      let {\n        taskArray\n      } = _ref6;\n      let {\n        payload\n      } = _ref7;\n      taskArray.forEach(i => {\n        if (i.id === payload.id) {\n          i.label = payload.label;\n        }\n      });\n    },\n    updateTaskTime: (tasks, _ref8) => {\n      let {\n        payload\n      } = _ref8;\n      tasks.taskArray.forEach(i => {\n        if (i.id === payload.id) {\n          tasks.meta.totalTaskListTime -= i.time;\n          tasks.meta.remainingTaskListTime -= i.remainingTime;\n          tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\n          tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\n          i.remainingTime = payload.updatedTime * MIN_TO_MS;\n          i.time = payload.updatedTime * MIN_TO_MS;\n        }\n      });\n    },\n    updateTaskTimeByVal: (tasks, _ref9) => {\n      let {\n        payload\n      } = _ref9;\n      if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\n        tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n        tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n      } else {\n        tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n        tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\n        tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n      }\n      if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\n        tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n        tasks.taskArray[payload.focussedTaskIndex].time = 0;\n      } else {\n        tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n        tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\n        tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n      }\n    },\n    updateOrder: (tasks, _ref10) => {\n      let {\n        payload\n      } = _ref10;\n      tasks.taskArray = payload;\n    },\n    focusOnTask: (tasks, _ref11) => {\n      let {\n        payload\n      } = _ref11;\n      if (typeof payload === \"number\") {\n        tasks.meta.focussedTaskIndex = payload;\n      } else {\n        // done tasks, remaining time = 0 tasks shouldnt be picked.\n        let completedTaskStartIndex = tasks.meta.completedTaskStartIndex !== -1 ? tasks.meta.completedTaskStartIndex : tasks.taskArray.length;\n        let index = -1;\n        if (payload === \"smallest\") {\n          let time,\n            lowest = Number.POSITIVE_INFINITY;\n          for (let i = 0; i < completedTaskStartIndex; i++) {\n            time = tasks.taskArray[i].remainingTime;\n            if (time < 1000) continue; // rem. time less than second(1000ms)\n            if (time < lowest) {\n              lowest = time;\n              index = i;\n            }\n          }\n        } else if (payload === \"largest\") {\n          let time,\n            highest = Number.NEGATIVE_INFINITY;\n          for (let i = 0; i < completedTaskStartIndex; i++) {\n            time = tasks.taskArray[i].remainingTime;\n            if (time < 1000) continue; // rem. time less than second(1000ms)\n            if (time > highest) {\n              highest = time;\n              index = i;\n            }\n          }\n        }\n        updatePageTitle(`Fokus: ${tasks.taskArray[index].content}`);\n        tasks.meta.focussedTaskIndex = index;\n      }\n    },\n    resetFocussedTask: tasks => {\n      tasks.meta.focussedTaskIndex = -1;\n    },\n    tick: (tasks, _ref12) => {\n      let {\n        payload\n      } = _ref12;\n      tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\n      tasks.meta.remainingTaskListTime -= payload.deltaMS;\n      if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n        tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n      }\n      if (tasks.meta.remainingTaskListTime < 0) {\n        tasks.meta.remainingTaskListTime = 0;\n      }\n    },\n    resetTaskTimer: (tasks, _ref13) => {\n      let {\n        payload\n      } = _ref13;\n      tasks.taskArray[payload].isRunning = false;\n      tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\n      tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\n      tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n    },\n    toggleIsRunning: (tasks, _ref14) => {\n      let {\n        payload\n      } = _ref14;\n      if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n    },\n    toggleShowCompletedTasks: tasks => {\n      tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n    },\n    toggleIsCompleted: (tasks, _ref15) => {\n      let {\n        payload\n      } = _ref15;\n      tasks.taskArray.forEach(i => {\n        if (i.id === payload) {\n          if (i.isCompleted) {\n            tasks.meta.remainingTaskListTime += i.remainingTime;\n            --tasks.meta.completedTasksCount;\n          } else {\n            tasks.meta.remainingTaskListTime -= i.remainingTime;\n            ++tasks.meta.completedTasksCount;\n          }\n          i.isCompleted = !i.isCompleted;\n        }\n      });\n    },\n    clearCompletedTasks: tasks => {\n      if (tasks.meta.completedTaskStartIndex !== -1) {\n        for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n          if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\n          tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\n        }\n        tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n        tasks.meta.completedTaskStartIndex = -1;\n        tasks.meta.completedTasksCount = 0;\n      }\n    },\n    updateLabelCount: (tasks, _ref16) => {\n      let {\n        payload\n      } = _ref16;\n      if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n      if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n    },\n    incrementGlobalKey: _ref17 => {\n      let {\n        meta\n      } = _ref17;\n      ++meta.globalKey;\n    },\n    rearrange: (tasks, _ref18) => {\n      let {\n        payload\n      } = _ref18;\n      let id = payload.id;\n      if (payload.markedAsComplete) {\n        if (tasks.meta.completedTaskStartIndex === -1) {\n          tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n          let found = false;\n          for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n            if (found) {\n              let temp = tasks.taskArray[i];\n              tasks.taskArray[i] = tasks.taskArray[i + 1];\n              tasks.taskArray[i + 1] = temp;\n            } else if (tasks.taskArray[i].id === id) {\n              found = true;\n              let temp = tasks.taskArray[i];\n              tasks.taskArray[i] = tasks.taskArray[i + 1];\n              tasks.taskArray[i + 1] = temp;\n            }\n          }\n          tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n        } else {\n          let task, idx;\n          for (let i = 0; i < tasks.taskArray.length; i++) {\n            if (tasks.taskArray[i].id === id) {\n              task = tasks.taskArray[i];\n              idx = i;\n              break;\n            }\n          }\n          let pos = -1;\n          for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n            if (tasks.taskArray[i].globalKey > task.globalKey) continue;else {\n              pos = i;\n              break;\n            }\n          }\n          if (pos === -1) {\n            tasks.taskArray.push(task);\n          } else {\n            tasks.taskArray.splice(pos, 0, task);\n          }\n          tasks.taskArray.splice(idx, 1);\n          tasks.meta.completedTaskStartIndex -= 1;\n        }\n      } else {\n        if (tasks.meta.completedTaskStartIndex == 0) {\n          let task, idx;\n          for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n            if (tasks.taskArray[i].id === id) {\n              task = tasks.taskArray[i];\n              idx = i;\n              break;\n            }\n          }\n          tasks.taskArray.splice(idx, 1);\n          tasks.taskArray.unshift(task);\n          tasks.meta.completedTaskStartIndex = 1;\n        } else {\n          let task, idx;\n          for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n            if (tasks.taskArray[i].id === id) {\n              task = tasks.taskArray[i];\n              idx = i;\n              break;\n            }\n          }\n          let start = tasks.meta.completedTaskStartIndex - 1;\n          let pos = -1;\n          for (let i = start; i >= 0; i--) {\n            if (tasks.taskArray[i].globalKey < task.globalKey) continue;else {\n              pos = i;\n              break;\n            }\n          }\n          tasks.taskArray.splice(idx, 1);\n          if (pos === -1) {\n            tasks.taskArray.unshift(task);\n          } else {\n            pos++;\n            tasks.taskArray.splice(pos, 0, task);\n          }\n          tasks.meta.completedTaskStartIndex += 1;\n        }\n        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n          tasks.meta.completedTaskStartIndex = -1;\n        }\n      }\n    },\n    changeSoundscapeTrack: (_ref19, _ref20) => {\n      let {\n        soundscape\n      } = _ref19;\n      let {\n        payload\n      } = _ref20;\n      soundscape.track = payload;\n    },\n    toggleSoundscapeState: (_ref21, _ref22) => {\n      let {\n        soundscape\n      } = _ref21;\n      let {\n        payload\n      } = _ref22;\n      soundscape.isPlaying = payload;\n    },\n    updateSoundscapeVolume: (_ref23, _ref24) => {\n      let {\n        soundscape\n      } = _ref23;\n      let {\n        payload\n      } = _ref24;\n      soundscape.volume = payload;\n    }\n  }\n});\nexport const {\n  create,\n  remove,\n  updateTaskObject,\n  updateTaskContent,\n  updateTaskLabel,\n  updateTaskTime,\n  updateTaskTimeByVal,\n  focusOnTask,\n  resetFocussedTask,\n  tick,\n  resetTaskTimer,\n  toggleIsRunning,\n  toggleShowCompletedTasks,\n  toggleIsCompleted,\n  clearCompletedTasks,\n  updateOrder,\n  updateLabelCount,\n  incrementGlobalKey,\n  rearrange,\n  changeSoundscapeTrack,\n  toggleSoundscapeState,\n  updateSoundscapeVolume\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","MIN_TO_MS","updatePageTitle","labelOptions","work","color","count","personal","fitness","metime","explore","tasksSlice","name","initialState","taskArray","labels","soundscape","track","isPlaying","volume","meta","globalKey","completedTaskStartIndex","focussedTaskIndex","showCompletedTasks","completedTasksCount","totalTaskListTime","remainingTaskListTime","reducers","create","tasks","_ref","payload","time","remainingTime","unshift","remove","_ref2","filter","i","id","isCompleted","length","updateTaskObject","_ref3","map","updateTaskContent","_ref4","_ref5","forEach","content","updatedTaskContent","updateTaskLabel","_ref6","_ref7","label","updateTaskTime","_ref8","updatedTime","updateTaskTimeByVal","_ref9","val","updateOrder","_ref10","focusOnTask","_ref11","index","lowest","Number","POSITIVE_INFINITY","highest","NEGATIVE_INFINITY","resetFocussedTask","tick","_ref12","deltaMS","resetTaskTimer","_ref13","isRunning","toggleIsRunning","_ref14","undefined","idx","toggleShowCompletedTasks","toggleIsCompleted","_ref15","clearCompletedTasks","updateLabelCount","_ref16","oldLabel","newLabel","incrementGlobalKey","_ref17","rearrange","_ref18","markedAsComplete","found","temp","task","pos","push","splice","start","changeSoundscapeTrack","_ref19","_ref20","toggleSoundscapeState","_ref21","_ref22","updateSoundscapeVolume","_ref23","_ref24","actions","reducer"],"sources":["/Users/vigneshgs/fokus/src/containers/taskBoard/taskBoardSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\nimport { updatePageTitle } from \"./../../helpers\";\n\nconst labelOptions = {\n    work: {\n        color: \"#de1738\",\n        count: 0,\n    },\n    personal: {\n        color: \"#89CFF0\",\n        count: 0,\n    },\n    fitness: {\n        color: \"#76ff7a\",\n        count: 0,\n    },\n    metime: {\n        color: \"#7442c8\",\n        count: 0,\n    },\n    explore: {\n        color: \"#efc0fe\",\n        count: 0,\n    },\n};\n\nexport const tasksSlice = createSlice({\n    name: \"tasks\",\n    initialState: {\n        taskArray: [],\n        labels: labelOptions,\n        soundscape: {\n            track: \"mute\",\n            isPlaying: false,\n            volume: 0.7,\n        },\n        meta: {\n            globalKey: 0,\n            completedTaskStartIndex: -1,\n            focussedTaskIndex: -1,\n            showCompletedTasks: true,\n            completedTasksCount: 0,\n            totalTaskListTime: 0,\n            remainingTaskListTime: 0,\n        },\n    },\n    reducers: {\n        create: (tasks, { payload }) => {\n            payload.time = payload.time * MIN_TO_MS;\n            payload.remainingTime = payload.remainingTime * MIN_TO_MS;\n            tasks.taskArray.unshift(payload);\n            tasks.meta.totalTaskListTime += payload.time;\n            tasks.meta.remainingTaskListTime += payload.time;\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\n        },\n        remove: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.filter((i) => {\n                if (i.id !== payload) return true;\n                else {\n                    if (!i.isCompleted) {\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\n                    } else {\n                        tasks.meta.completedTasksCount--;\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\n                            tasks.meta.completedTaskStartIndex = -1;\n                        }\n                    }\n\n                    if (!i.isCompleted) {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    }\n                    tasks.meta.totalTaskListTime -= i.time;\n\n                    return false;\n                }\n            });\n        },\n        updateTaskObject: (tasks, { payload }) => {\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\n        },\n        updateTaskContent: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.updatedTaskContent;\n                }\n            });\n        },\n        updateTaskLabel: ({ taskArray }, { payload }) => {\n            taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.label = payload.label;\n                }\n            });\n        },\n        updateTaskTime: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    tasks.meta.totalTaskListTime -= i.time;\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\n                    tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\n                    i.remainingTime = payload.updatedTime * MIN_TO_MS;\n                    i.time = payload.updatedTime * MIN_TO_MS;\n                }\n            });\n        },\n        updateTaskTimeByVal: (tasks, { payload }) => {\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            } else {\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\n            }\n\n            if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\n            } else {\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\n            }\n        },\n        updateOrder: (tasks, { payload }) => {\n            tasks.taskArray = payload;\n        },\n        focusOnTask: (tasks, { payload }) => {\n            if (typeof payload === \"number\") {\n                tasks.meta.focussedTaskIndex = payload;\n            } else {\n                // done tasks, remaining time = 0 tasks shouldnt be picked.\n                let completedTaskStartIndex = tasks.meta.completedTaskStartIndex !== -1 ? tasks.meta.completedTaskStartIndex : tasks.taskArray.length;\n                let index = -1;\n                if (payload === \"smallest\") {\n                    let time,\n                        lowest = Number.POSITIVE_INFINITY;\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\n                        time = tasks.taskArray[i].remainingTime;\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\n                        if (time < lowest) {\n                            lowest = time;\n                            index = i;\n                        }\n                    }\n                } else if (payload === \"largest\") {\n                    let time,\n                        highest = Number.NEGATIVE_INFINITY;\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\n                        time = tasks.taskArray[i].remainingTime;\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\n                        if (time > highest) {\n                            highest = time;\n                            index = i;\n                        }\n                    }\n                }\n                updatePageTitle(`Fokus: ${tasks.taskArray[index].content}`);\n                tasks.meta.focussedTaskIndex = index;\n            }\n        },\n        resetFocussedTask: (tasks) => {\n            tasks.meta.focussedTaskIndex = -1;\n        },\n        tick: (tasks, { payload }) => {\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\n            tasks.meta.remainingTaskListTime -= payload.deltaMS;\n\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\n            }\n            if (tasks.meta.remainingTaskListTime < 0) {\n                tasks.meta.remainingTaskListTime = 0;\n            }\n        },\n        resetTaskTimer: (tasks, { payload }) => {\n            tasks.taskArray[payload].isRunning = false;\n\n            tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\n            tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\n\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\n        },\n        toggleIsRunning: (tasks, { payload }) => {\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\n        },\n        toggleShowCompletedTasks: (tasks) => {\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\n        },\n        toggleIsCompleted: (tasks, { payload }) => {\n            tasks.taskArray.forEach((i) => {\n                if (i.id === payload) {\n                    if (i.isCompleted) {\n                        tasks.meta.remainingTaskListTime += i.remainingTime;\n                        --tasks.meta.completedTasksCount;\n                    } else {\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\n                        ++tasks.meta.completedTasksCount;\n                    }\n\n                    i.isCompleted = !i.isCompleted;\n                }\n            });\n        },\n        clearCompletedTasks: (tasks) => {\n            if (tasks.meta.completedTaskStartIndex !== -1) {\n                for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                    if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\n\n                    tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\n                }\n\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\n                tasks.meta.completedTaskStartIndex = -1;\n                tasks.meta.completedTasksCount = 0;\n            }\n        },\n        updateLabelCount: (tasks, { payload }) => {\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\n        },\n        incrementGlobalKey: ({ meta }) => {\n            ++meta.globalKey;\n        },\n        rearrange: (tasks, { payload }) => {\n            let id = payload.id;\n\n            if (payload.markedAsComplete) {\n                if (tasks.meta.completedTaskStartIndex === -1) {\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                    let found = false;\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\n                        if (found) {\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        } else if (tasks.taskArray[i].id === id) {\n                            found = true;\n                            let temp = tasks.taskArray[i];\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\n                            tasks.taskArray[i + 1] = temp;\n                        }\n                    }\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\n                } else {\n                    let task, idx;\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n                    let pos = -1;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos === -1) {\n                        tasks.taskArray.push(task);\n                    } else {\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.meta.completedTaskStartIndex -= 1;\n                }\n            } else {\n                if (tasks.meta.completedTaskStartIndex == 0) {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    tasks.taskArray.unshift(task);\n                    tasks.meta.completedTaskStartIndex = 1;\n                } else {\n                    let task, idx;\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\n                        if (tasks.taskArray[i].id === id) {\n                            task = tasks.taskArray[i];\n                            idx = i;\n                            break;\n                        }\n                    }\n\n                    let start = tasks.meta.completedTaskStartIndex - 1;\n                    let pos = -1;\n                    for (let i = start; i >= 0; i--) {\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\n                        else {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    tasks.taskArray.splice(idx, 1);\n                    if (pos === -1) {\n                        tasks.taskArray.unshift(task);\n                    } else {\n                        pos++;\n                        tasks.taskArray.splice(pos, 0, task);\n                    }\n                    tasks.meta.completedTaskStartIndex += 1;\n                }\n\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\n                    tasks.meta.completedTaskStartIndex = -1;\n                }\n            }\n        },\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\n            soundscape.track = payload;\n        },\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\n            soundscape.isPlaying = payload;\n        },\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\n            soundscape.volume = payload;\n        },\n    },\n});\n\nexport const {\n    create,\n    remove,\n    updateTaskObject,\n    updateTaskContent,\n    updateTaskLabel,\n    updateTaskTime,\n    updateTaskTimeByVal,\n    focusOnTask,\n    resetFocussedTask,\n    tick,\n    resetTaskTimer,\n    toggleIsRunning,\n    toggleShowCompletedTasks,\n    toggleIsCompleted,\n    clearCompletedTasks,\n    updateOrder,\n    updateLabelCount,\n    incrementGlobalKey,\n    rearrange,\n    changeSoundscapeTrack,\n    toggleSoundscapeState,\n    updateSoundscapeVolume,\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}