{"version":3,"file":"index.js","sources":["../src/utilities/index.ts","../src/forked-rebound/onFrame.js","../src/constants.ts","../src/springSettings/index.ts","../src/forked-rebound/util.js","../src/forked-rebound/Loopers.js","../src/forked-rebound/Spring.js","../src/forked-rebound/SpringSystem.js","../src/flip/animateFlippedElements/spring/index.ts","../src/flip/animateFlippedElements/index.ts","../src/flip/getFlippedElementPositions/utilities.ts","../src/flip/index.ts","../src/flip/getFlippedElementPositions/getFlippedElementPositionsAfterUpdate/index.ts","../src/flip/animateUnflippedElements/index.ts","../src/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/index.ts","../src/Flipper.ts","../src/Spring/index.ts"],"sourcesContent":["import { IndexableObject } from './types'\n\nexport const isNumber = (x: any) => typeof x === 'number'\n\nexport const isFunction = (x: any) => typeof x === 'function'\n\nexport const isObject = (x: any) =>\n  Object.prototype.toString.call(x) === '[object Object]'\n\nexport const toArray = (arrayLike: ArrayLike<any>) =>\n  Array.prototype.slice.apply(arrayLike)\n\nexport const getDuplicateValsAsStrings = (arr: string[]): string[] => {\n  const baseObj: IndexableObject = {}\n  const obj = arr.reduce((acc, curr) => {\n    acc[curr] = (acc[curr] || 0) + 1\n    return acc\n  }, baseObj)\n  return Object.keys(obj).filter(val => obj[val] > 1)\n}\n\n// tslint only likes this with a regular function, not an arrow function\nexport function assign(target: IndexableObject, ...args: IndexableObject[]) {\n  args.forEach(arg => {\n    if (!arg) {\n      return\n    }\n    // Skip over if undefined or null\n    for (const nextKey in arg) {\n      // Avoid bugs when hasOwnProperty is shadowed\n      if (Object.prototype.hasOwnProperty.call(arg, nextKey)) {\n        target[nextKey] = arg[nextKey]\n      }\n    }\n  })\n  return target\n}\n\nexport const tweenProp = (start: number, end: number, position: number) =>\n  start + (end - start) * position\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nlet _onFrame\nif (typeof window !== \"undefined\") {\n  _onFrame = window.requestAnimationFrame\n}\n\n_onFrame =\n  _onFrame ||\n  function(callback) {\n    window.setTimeout(callback, 1000 / 60)\n  }\n\nexport default _onFrame\n","export const DATA_FLIP_ID = 'data-flip-id'\nexport const DATA_INVERSE_FLIP_ID = 'data-inverse-flip-id'\nexport const DATA_FLIP_COMPONENT_ID = 'data-flip-component-id'\nexport const DATA_FLIP_CONFIG = 'data-flip-config'\nexport const DATA_PORTAL_KEY = 'data-portal-key'\nexport const DATA_EXIT_CONTAINER = 'data-exit-container'\n","import { isObject, assign } from '../utilities'\nimport { SpringPresets, SpringConfig, SpringOption } from './types'\n\n// adapted from\n// https://github.com/chenglou/react-motion/blob/master/src/presets.js\nexport const springPresets: SpringPresets = {\n  noWobble: { stiffness: 200, damping: 26 },\n  gentle: { stiffness: 120, damping: 14 },\n  veryGentle: { stiffness: 130, damping: 17 },\n  wobbly: { stiffness: 180, damping: 12 },\n  stiff: { stiffness: 260, damping: 26 }\n}\n\nfunction argIsSpringConfig(\n  arg: SpringConfig | keyof SpringPresets | undefined\n): arg is SpringConfig {\n  return isObject(arg)\n}\n\nexport const normalizeSpring = (\n  spring?: SpringConfig | keyof SpringPresets | any\n) => {\n  if (argIsSpringConfig(spring)) {\n    return spring\n  } else if (Object.keys(springPresets).indexOf(spring) > -1) {\n    return springPresets[spring]\n  } else {\n    return {}\n  }\n}\n\nexport const getSpringConfig = ({\n  flipperSpring,\n  flippedSpring\n}: { flipperSpring?: SpringOption; flippedSpring?: SpringOption } = {}) => {\n  return assign(\n    {},\n    springPresets.noWobble,\n    normalizeSpring(flipperSpring),\n    normalizeSpring(flippedSpring)\n  )\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nexport { default as onFrame } from './onFrame'\n\nconst start = Date.now()\nexport const performanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function'\n    ? () => performance.now()\n    : () => Date.now() - start\n\n// Lop off the first occurence of the reference in the Array.\nexport function removeFirst(array, item) {\n  const idx = array.indexOf(item)\n  idx !== -1 && array.splice(idx, 1)\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nimport { onFrame, performanceNow } from \"./util\"\n\n/**\n * Plays each frame of the SpringSystem on animation\n * timing loop. This is the default type of looper for a new spring system\n * as it is the most common when developing UI.\n * @public\n */\nexport class AnimationLooper {\n  run() {\n    onFrame(() => {\n      this.springSystem.loop(performanceNow())\n    })\n  }\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nimport { removeFirst } from './util'\n\nclass PhysicsState {\n  constructor() {\n    this.position = 0\n    this.velocity = 0\n  }\n}\n\nlet ID = 0\nconst MAX_DELTA_TIME_SEC = 0.064\nconst SOLVER_TIMESTEP_SEC = 0.001\n\n/**\n * Provides a model of a classical spring acting to\n * resolve a body to equilibrium. Springs have configurable\n * tension which is a force multipler on the displacement of the\n * spring from its rest point or `endValue` as defined by [Hooke's\n * law](http://en.wikipedia.org/wiki/Hooke's_law). Springs also have\n * configurable friction, which ensures that they do not oscillate\n * infinitely. When a Spring is displaced by updating it's resting\n * or `currentValue`, the SpringSystems that contain that Spring\n * will automatically start looping to solve for equilibrium. As each\n * timestep passes, `SpringListener` objects attached to the Spring\n * will be notified of the updates providing a way to drive an\n * animation off of the spring's resolution curve.\n * @public\n */\nclass Spring {\n  constructor(springSystem) {\n    this._id = `s${ID++}`\n    this._springSystem = springSystem\n\n    this.listeners = []\n    this._startValue = 0\n\n    this._currentState = new PhysicsState()\n    this._displacementFromRestThreshold = 0.001\n    this._endValue = 0\n    this._overshootClampingEnabled = false\n    this._previousState = new PhysicsState()\n    this._restSpeedThreshold = 0.001\n\n    this._tempState = new PhysicsState()\n    this._timeAccumulator = 0\n    this._wasAtRest = true\n    // hack from alex -- only call 1x\n    this._onActivateCalled\n    this._cachedSpringConfig = {}\n  }\n\n  getId() {\n    return this._id\n  }\n\n  /**\n   * Remove a Spring from simulation and clear its listeners.\n   * @public\n   */\n  destroy() {\n    this.listeners = []\n    this._springSystem.deregisterSpring(this)\n  }\n\n  /**\n   * Set the configuration values for this Spring. A SpringConfig\n   * contains the tension and friction values used to solve for the\n   * equilibrium of the Spring in the physics loop.\n   * @public\n   */\n  setSpringConfig(springConfig) {\n    this._springConfig = springConfig\n    return this\n  }\n  /**\n   * Retrieve the current value of the Spring.\n   * @public\n   */\n  getCurrentValue() {\n    return this._currentState.position\n  }\n\n  /**\n   * Get the absolute distance of the Spring from a given state value\n   */\n  getDisplacementDistanceForState(state) {\n    return Math.abs(this._endValue - state.position)\n  }\n\n  /**\n   * Set the endValue or resting position of the spring. If this\n   * value is different than the current value, the SpringSystem will\n   * be notified and will begin running its solver loop to resolve\n   * the Spring to equilibrium. Any listeners that are registered\n   * for onSpringEndStateChange will also be notified of this update\n   * immediately.\n   * @public\n   */\n\n  setEndValue(endValue) {\n    if (endValue === this._endValue) return this\n    this.prevEndValue = endValue\n    if (this._endValue === endValue && this.isAtRest()) {\n      return this\n    }\n    this._startValue = this.getCurrentValue()\n    this._endValue = endValue\n    this._springSystem.activateSpring(this.getId())\n    for (let i = 0, len = this.listeners.length; i < len; i++) {\n      const listener = this.listeners[i]\n      const onChange = listener.onSpringEndStateChange\n      onChange && onChange(this)\n    }\n    return this\n  }\n\n  /**\n   * Set the current velocity of the Spring, in pixels per second. As\n   * previously mentioned, this can be useful when you are performing\n   * a direct manipulation gesture. When a UI element is released you\n   * may call setVelocity on its animation Spring so that the Spring\n   * continues with the same velocity as the gesture ended with. The\n   * friction, tension, and displacement of the Spring will then\n   * govern its motion to return to rest on a natural feeling curve.\n   * @public\n   */\n  setVelocity(velocity) {\n    if (velocity === this._currentState.velocity) {\n      return this\n    }\n    this._currentState.velocity = velocity\n    this._springSystem.activateSpring(this.getId())\n    return this\n  }\n\n  setCurrentValue(currentValue) {\n    this._startValue = currentValue\n    this._currentState.position = currentValue\n    for (var i = 0, len = this.listeners.length; i < len; i++) {\n      var listener = this.listeners[i]\n      listener.onSpringUpdate && listener.onSpringUpdate(this)\n    }\n    return this\n  }\n\n  setAtRest() {\n    this._endValue = this._currentState.position\n    this._tempState.position = this._currentState.position\n    this._currentState.velocity = 0\n    return this\n  }\n\n  /**\n   * Enable overshoot clamping. This means that the Spring will stop\n   * immediately when it reaches its resting position regardless of\n   * any existing momentum it may have. This can be useful for certain\n   * types of animations that should not oscillate such as a scale\n   * down to 0 or alpha fade.\n   * @public\n   */\n  setOvershootClampingEnabled(enabled) {\n    this._overshootClampingEnabled = enabled\n    return this\n  }\n\n  /**\n   * Check if the Spring has gone past its end point by comparing\n   * the direction it was moving in when it started to the current\n   * position and end value.\n   * @public\n   */\n  isOvershooting() {\n    const start = this._startValue\n    const end = this._endValue\n    return (\n      this._springConfig.tension > 0 &&\n      ((start < end && this.getCurrentValue() > end) ||\n        (start > end && this.getCurrentValue() < end))\n    )\n  }\n\n  /**\n   * The main solver method for the Spring. It takes\n   * the current time and delta since the last time step and performs\n   * an RK4 integration to get the new position and velocity state\n   * for the Spring based on the tension, friction, velocity, and\n   * displacement of the Spring.\n   * @public\n   */\n  advance(time, realDeltaTime) {\n    let isAtRest = this.isAtRest()\n\n    if (isAtRest && this._wasAtRest) {\n      return\n    }\n\n    let adjustedDeltaTime = realDeltaTime\n    if (realDeltaTime > MAX_DELTA_TIME_SEC) {\n      adjustedDeltaTime = MAX_DELTA_TIME_SEC\n    }\n\n    this._timeAccumulator += adjustedDeltaTime\n\n    const tension = this._springConfig.tension\n    const friction = this._springConfig.friction\n    let position = this._currentState.position\n    let velocity = this._currentState.velocity\n    let tempPosition = this._tempState.position\n    let tempVelocity = this._tempState.velocity\n    let aVelocity\n    let aAcceleration\n    let bVelocity\n    let bAcceleration\n    let cVelocity\n    let cAcceleration\n    let dVelocity\n    let dAcceleration\n    let dxdt\n    let dvdt\n\n    while (this._timeAccumulator >= SOLVER_TIMESTEP_SEC) {\n      this._timeAccumulator -= SOLVER_TIMESTEP_SEC\n\n      if (this._timeAccumulator < SOLVER_TIMESTEP_SEC) {\n        this._previousState.position = position\n        this._previousState.velocity = velocity\n      }\n\n      aVelocity = velocity\n      aAcceleration =\n        tension * (this._endValue - tempPosition) - friction * velocity\n\n      tempPosition = position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5\n      tempVelocity = velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5\n      bVelocity = tempVelocity\n      bAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      tempPosition = position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5\n      tempVelocity = velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5\n      cVelocity = tempVelocity\n      cAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      tempPosition = position + cVelocity * SOLVER_TIMESTEP_SEC\n      tempVelocity = velocity + cAcceleration * SOLVER_TIMESTEP_SEC\n      dVelocity = tempVelocity\n      dAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      dxdt =\n        (1.0 / 6.0) * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity)\n      dvdt =\n        (1.0 / 6.0) *\n        (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration)\n\n      position += dxdt * SOLVER_TIMESTEP_SEC\n      velocity += dvdt * SOLVER_TIMESTEP_SEC\n    }\n\n    this._tempState.position = tempPosition\n    this._tempState.velocity = tempVelocity\n\n    this._currentState.position = position\n    this._currentState.velocity = velocity\n\n    if (this._timeAccumulator > 0) {\n      this._interpolate(this._timeAccumulator / SOLVER_TIMESTEP_SEC)\n    }\n\n    if (\n      this.isAtRest() ||\n      (this._overshootClampingEnabled && this.isOvershooting())\n    ) {\n      if (this._springConfig.tension > 0) {\n        this._startValue = this._endValue\n        this._currentState.position = this._endValue\n      } else {\n        this._endValue = this._currentState.position\n        this._startValue = this._endValue\n      }\n      this.setVelocity(0)\n      isAtRest = true\n    }\n\n    let notifyActivate = false\n    if (this._wasAtRest) {\n      this._wasAtRest = false\n      notifyActivate = true\n    }\n\n    let notifyAtRest = false\n    if (isAtRest) {\n      this._wasAtRest = true\n      notifyAtRest = true\n    }\n\n    this.notifyPositionUpdated(notifyActivate, notifyAtRest)\n  }\n\n  notifyPositionUpdated(notifyActivate, notifyAtRest) {\n    this.listeners.filter(Boolean).forEach(listener => {\n      if (\n        notifyActivate &&\n        listener.onSpringActivate &&\n        !this._onActivateCalled\n      ) {\n        listener.onSpringActivate(this)\n        this._onActivateCalled = true\n      }\n\n      if (listener.onSpringUpdate) {\n        listener.onSpringUpdate(this)\n      }\n\n      if (notifyAtRest && listener.onSpringAtRest) {\n        listener.onSpringAtRest(this)\n      }\n    })\n  }\n\n  /**\n   * Check if the SpringSystem should advance. Springs are advanced\n   * a final frame after they reach equilibrium to ensure that the\n   * currentValue is exactly the requested endValue regardless of the\n   * displacement threshold.\n   * @public\n   */\n  systemShouldAdvance() {\n    return !this.isAtRest() || !this.wasAtRest()\n  }\n\n  wasAtRest() {\n    return this._wasAtRest\n  }\n\n  /**\n   * Check if the Spring is atRest meaning that it's currentValue and\n   * endValue are the same and that it has no velocity. The previously\n   * described thresholds for speed and displacement define the bounds\n   * of this equivalence check. If the Spring has 0 tension, then it will\n   * be considered at rest whenever its absolute velocity drops below the\n   * restSpeedThreshold.\n   * @public\n   */\n  isAtRest() {\n    const isAtRest =\n      Math.abs(this._currentState.velocity) < this._restSpeedThreshold &&\n      (this.getDisplacementDistanceForState(this._currentState) <=\n        this._displacementFromRestThreshold ||\n        this._springConfig.tension === 0)\n    return isAtRest\n  }\n\n  _interpolate(alpha) {\n    this._currentState.position =\n      this._currentState.position * alpha +\n      this._previousState.position * (1 - alpha)\n    this._currentState.velocity =\n      this._currentState.velocity * alpha +\n      this._previousState.velocity * (1 - alpha)\n  }\n\n  addListener(newListener) {\n    this.listeners.push(newListener)\n    return this\n  }\n\n  addOneTimeListener(newListener) {\n    const oneTimeFunc = func => (...args) => {\n      func(...args)\n      this.removeListener(newListener)\n    }\n    Object.keys(newListener).forEach(key => {\n      newListener[key] = oneTimeFunc(newListener[key])\n    })\n    this.listeners.push(newListener)\n    return this\n  }\n\n  removeListener(listenerToRemove) {\n    removeFirst(this.listeners, listenerToRemove)\n    return this\n  }\n}\n\nexport default Spring\n","//\n/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\nimport { AnimationLooper } from './Loopers'\nimport Spring from './Spring'\nimport { removeFirst } from './util'\n\n/**\n * A set of Springs that all run on the same physics\n * timing loop. To get started with a Rebound animation, first\n * create a new SpringSystem and then add springs to it.\n * @public\n */\nclass SpringSystem {\n  constructor(looper) {\n    this.looper = looper || new AnimationLooper()\n    this.looper.springSystem = this\n\n    this.listeners = []\n    this._activeSprings = []\n    this._idleSpringIndices = []\n    this._isIdle = true\n    this._lastTimeMillis = -1\n    this._springRegistry = {}\n  }\n\n  /**\n   * Add a new spring to this SpringSystem. This Spring will now be solved for\n   * during the physics iteration loop. By default the spring will use the\n   * default Origami spring config with 40 tension and 7 friction, but you can\n   * also provide your own values here.\n   * @public\n   */\n  createSpring(tension, friction) {\n    return this.createSpringWithConfig({ tension, friction })\n  }\n  /**\n   * Add a spring with the provided SpringConfig.\n   * @public\n   */\n  createSpringWithConfig(springConfig) {\n    const spring = new Spring(this)\n    this.registerSpring(spring)\n    spring.setSpringConfig(springConfig)\n    return spring\n  }\n\n  /**\n   * Check if a SpringSystem is idle or active. If all of the Springs in the\n   * SpringSystem are at rest, i.e. the physics forces have reached equilibrium,\n   * then this method will return true.\n   * @public\n   */\n  getIsIdle() {\n    return this._isIdle\n  }\n\n  /**\n   * Manually add a spring to this system. This is called automatically\n   * if a Spring is created with SpringSystem#createSpring.\n   *\n   * This method sets the spring up in the registry so that it can be solved\n   * in the solver loop.\n   * @public\n   */\n  registerSpring(spring) {\n    this._springRegistry[spring.getId()] = spring\n  }\n\n  /**\n   * Deregister a spring with this SpringSystem. The SpringSystem will\n   * no longer consider this Spring during its integration loop once\n   * this is called. This is normally done automatically for you when\n   * you call Spring#destroy.\n   * @public\n   */\n  deregisterSpring(spring) {\n    removeFirst(this._activeSprings, spring)\n    delete this._springRegistry[spring.getId()]\n  }\n\n  advance(time, deltaTime) {\n    while (this._idleSpringIndices.length > 0) {\n      this._idleSpringIndices.pop()\n    }\n    this._activeSprings.filter(Boolean).forEach(spring => {\n      if (spring.systemShouldAdvance()) {\n        spring.advance(time / 1000.0, deltaTime / 1000.0)\n      } else {\n        this._idleSpringIndices.push(this._activeSprings.indexOf(spring))\n      }\n    })\n\n    while (this._idleSpringIndices.length > 0) {\n      const idx = this._idleSpringIndices.pop()\n      idx >= 0 && this._activeSprings.splice(idx, 1)\n    }\n  }\n\n  /**\n   * This is the main solver loop called to move the simulation\n   * forward through time. Before each pass in the solver loop\n   * onBeforeIntegrate is called on an any listeners that have\n   * registered themeselves with the SpringSystem. This gives you\n   * an opportunity to apply any constraints or adjustments to\n   * the springs that should be enforced before each iteration\n   * loop. Next the advance method is called to move each Spring in\n   * the systemShouldAdvance forward to the current time. After the\n   * integration step runs in advance, onAfterIntegrate is called\n   * on any listeners that have registered themselves with the\n   * SpringSystem. This gives you an opportunity to run any post\n   * integration constraints or adjustments on the Springs in the\n   * SpringSystem.\n   * @public\n   */\n  loop(currentTimeMillis) {\n    let listener\n    if (this._lastTimeMillis === -1) {\n      this._lastTimeMillis = currentTimeMillis - 1\n    }\n    const ellapsedMillis = currentTimeMillis - this._lastTimeMillis\n    this._lastTimeMillis = currentTimeMillis\n\n    let i = 0\n    const len = this.listeners.length\n    for (i = 0; i < len; i++) {\n      listener = this.listeners[i]\n      listener.onBeforeIntegrate && listener.onBeforeIntegrate(this)\n    }\n\n    this.advance(currentTimeMillis, ellapsedMillis)\n    if (this._activeSprings.length === 0) {\n      this._isIdle = true\n      this._lastTimeMillis = -1\n    }\n\n    for (i = 0; i < len; i++) {\n      listener = this.listeners[i]\n      listener.onAfterIntegrate && listener.onAfterIntegrate(this)\n    }\n\n    if (!this._isIdle) {\n      this.looper.run()\n    }\n  }\n\n  /**\n   * Used to notify the SpringSystem that a Spring has become displaced.\n   * The system responds by starting its solver loop up if it is currently idle.\n   */\n  activateSpring(springId) {\n    const spring = this._springRegistry[springId]\n    if (this._activeSprings.indexOf(spring) === -1) {\n      this._activeSprings.push(spring)\n    }\n    if (this.getIsIdle()) {\n      this._isIdle = false\n      this.looper.run()\n    }\n  }\n}\n\nexport default SpringSystem\n","import { SpringSystem } from '../../../forked-rebound'\nimport { StaggerConfigValue } from '../../../types'\nimport { FlipData, FlipDataArray } from '../types'\nimport {\n  SpringSystemInterface,\n  AddListenerArgs\n} from '../../../forked-rebound/types'\n\n// this should get created only 1x\nconst springSystem: SpringSystemInterface = new SpringSystem()\n\nexport const createSuspendedSpring = (flipData: FlipData) => {\n  const {\n    springConfig: { stiffness, damping, overshootClamping },\n    getOnUpdateFunc,\n    onAnimationEnd,\n    onSpringActivate\n  } = flipData\n\n  const spring = springSystem.createSpring(stiffness!, damping!)\n  spring.setOvershootClampingEnabled(!!overshootClamping)\n  const onSpringAtRest = () => {\n    // prevent SpringSystem from caching unused springs\n    spring.destroy()\n    onAnimationEnd()\n  }\n\n  const springConfig: AddListenerArgs = {\n    onSpringActivate,\n    onSpringAtRest,\n    onSpringUpdate: getOnUpdateFunc({\n      spring,\n      onAnimationEnd\n    })\n  }\n\n  spring.addListener(springConfig)\n  return spring\n}\n\nexport const createSpring = (flipped: FlipData) => {\n  const spring = createSuspendedSpring(flipped)\n  spring.setEndValue(1)\n  return spring\n}\n\nexport const normalizeSpeed = (speedConfig: number | undefined) => {\n  if (typeof speedConfig !== 'number') return 1.1\n  return 1 + Math.min(Math.max(speedConfig * 5, 0), 5)\n}\n\nexport const createStaggeredSprings = (\n  flippedArray: FlipDataArray,\n  staggerConfig: StaggerConfigValue = {}\n) => {\n  if (!flippedArray || !flippedArray.length) {\n    return\n  }\n\n  if (staggerConfig.reverse) {\n    flippedArray.reverse()\n  }\n\n  const normalizedSpeed = normalizeSpeed(staggerConfig.speed)\n\n  const nextThreshold = 1 / Math.max(Math.min(flippedArray.length, 100), 10)\n\n  const setEndValueFuncs = flippedArray\n    .map((flipped, i) => {\n      const cachedGetOnUpdate = flipped.getOnUpdateFunc\n\n      // modify the update function to adjust\n      // the end value of the trailing Flipped component\n      flipped.getOnUpdateFunc = args => {\n        const onUpdate = cachedGetOnUpdate(args)\n        return spring => {\n          let currentValue = spring.getCurrentValue()\n          // make sure trailing animations complete\n          currentValue =\n            currentValue < 0.01 ? 0 : currentValue > 0.99 ? 1 : currentValue\n\n          const updateTrailingAnimation = currentValue >= nextThreshold\n          if (updateTrailingAnimation) {\n            if (setEndValueFuncs[i + 1]) {\n              setEndValueFuncs[i + 1]!(\n                Math.max(Math.min(currentValue * normalizedSpeed, 1), 0)\n              )\n            }\n          }\n          // now call the actual update function\n          onUpdate(spring)\n        }\n      }\n      return flipped\n    })\n    .map(flipped => {\n      const spring = createSuspendedSpring(flipped)\n      if (!spring) {\n        return\n      }\n      return spring.setEndValue.bind(spring)\n    })\n    .filter(Boolean)\n\n  if (setEndValueFuncs[0]) {\n    setEndValueFuncs[0]!(1)\n  }\n}\n","import * as Rematrix from 'rematrix'\nimport { getSpringConfig } from '../../springSettings'\nimport {\n  toArray,\n  isFunction,\n  isNumber,\n  getDuplicateValsAsStrings,\n  assign,\n  tweenProp\n} from '../../utilities'\nimport * as constants from '../../constants'\nimport {\n  GetOnUpdateFunc,\n  OnUpdate,\n  Matrix,\n  InvertedChildren,\n  AnimateFlippedElementsArgs,\n  AnimatedVals,\n  FlipDataArray,\n  FlipData,\n  InitializeFlip\n} from './types'\nimport { BoundingClientRect } from '../getFlippedElementPositions/types'\nimport { FlippedIds } from '../types'\nimport { createSpring, createStaggeredSprings } from './spring'\nimport { IndexableObject } from '../../utilities/types'\nimport { FlipId } from '../../types'\n\n// 3d transforms were causing weird issues in chrome,\n// especially when opacity was also being tweened,\n// so convert to a 2d matrix\nexport const convertMatrix3dArrayTo2dArray = (matrix: Matrix): Matrix =>\n  [0, 1, 4, 5, 12, 13].map(index => matrix[index])\n\nexport const convertMatrix2dArrayToString = (matrix: Matrix) =>\n  `matrix(${matrix.join(', ')})`\n\nexport const invertTransformsForChildren = ({\n  invertedChildren,\n  matrix,\n  body\n}: {\n  matrix: Matrix\n  body: HTMLBodyElement\n  invertedChildren: InvertedChildren\n}) => {\n  invertedChildren.forEach(([child, childFlipConfig]) => {\n    if (!body.contains(child)) {\n      return\n    }\n    const scaleX = matrix[0]\n    const scaleY = matrix[3]\n    const translateX = matrix[4]\n    const translateY = matrix[5]\n\n    const inverseVals = { translateX: 0, translateY: 0, scaleX: 1, scaleY: 1 }\n    let transformString = ''\n    if (childFlipConfig.translate) {\n      inverseVals.translateX = -translateX / scaleX\n      inverseVals.translateY = -translateY / scaleY\n      transformString += `translate(${inverseVals.translateX}px, ${inverseVals.translateY}px)`\n    }\n    if (childFlipConfig.scale) {\n      inverseVals.scaleX = 1 / scaleX\n      inverseVals.scaleY = 1 / scaleY\n      transformString += ` scale(${inverseVals.scaleX}, ${inverseVals.scaleY})`\n    }\n    child.style.transform = transformString\n  })\n}\n\nexport const createApplyStylesFunc =\n  ({\n    element,\n    invertedChildren,\n    body\n  }: {\n    element: HTMLElement\n    invertedChildren: InvertedChildren\n    body: HTMLBodyElement\n  }) =>\n  ({\n    matrix,\n    opacity,\n    forceMinVals\n  }: {\n    matrix: Matrix\n    opacity?: number\n    forceMinVals?: boolean\n  }) => {\n    if (isNumber(opacity)) {\n      element.style.opacity = opacity + ''\n    }\n\n    if (forceMinVals) {\n      element.style.minHeight = '1px'\n      element.style.minWidth = '1px'\n    }\n\n    if (!matrix) {\n      return\n    }\n\n    const stringTransform = convertMatrix2dArrayToString(matrix)\n\n    // always apply transform, even if identity,\n    // because identity might be the starting state in a FLIP\n    // transition, if the element's position is controlled by transforms\n    element.style.transform = stringTransform\n\n    if (invertedChildren) {\n      invertTransformsForChildren({\n        invertedChildren,\n        matrix,\n        body\n      })\n    }\n  }\n\nexport const rectInViewport = ({\n  top,\n  bottom,\n  left,\n  right\n}: BoundingClientRect) => {\n  return (\n    top < window.innerHeight &&\n    bottom > 0 &&\n    left < window.innerWidth &&\n    right > 0\n  )\n}\n\nconst getInvertedChildren = (element: HTMLElement, id: string) =>\n  toArray(\n    element.querySelectorAll(`[${constants.DATA_INVERSE_FLIP_ID}=\"${id}\"]`)\n  )\n\nfunction extractFlipConfig(element: HTMLElement) {\n  const flipConfig = JSON.parse(element.dataset.flipConfig || '{}')\n  return flipConfig\n}\n\nexport default ({\n  flippedIds,\n  flipCallbacks,\n  inProgressAnimations,\n  flippedElementPositionsBeforeUpdate,\n  flippedElementPositionsAfterUpdate,\n  applyTransformOrigin,\n  spring,\n  getElement,\n  debug,\n  staggerConfig = {},\n  decisionData = {},\n  onComplete,\n  containerEl\n}: AnimateFlippedElementsArgs) => {\n  // the stuff below is used so we can return a promise that resolves when all FLIP animations have\n  // completed\n  let closureResolve: (flipIds: FlippedIds) => void\n\n  const flipCompletedPromise: Promise<FlippedIds> = new Promise(resolve => {\n    closureResolve = resolve\n  })\n  // hook for users of lib to attach logic when all flip animations have completed\n  if (onComplete) {\n    flipCompletedPromise.then(() => onComplete(containerEl, decisionData))\n  }\n  if (!flippedIds.length) {\n    return () => {\n      closureResolve!([])\n      return flipCompletedPromise\n    }\n  }\n\n  const completedAnimationIds: FlippedIds = []\n\n  const firstElement: HTMLElement = getElement(flippedIds[0])\n  // special handling for iframes\n  const body = firstElement\n    ? firstElement.ownerDocument!.querySelector('body')!\n    : document.querySelector('body')!\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (debug) {\n      // eslint-disable-next-line no-console\n      console.error(\n        '[react-flip-toolkit]\\nThe \"debug\" prop is set to true. All FLIP animations will return at the beginning of the transition.'\n      )\n    }\n  }\n\n  const duplicateFlipIds = getDuplicateValsAsStrings(flippedIds)\n  if (process.env.NODE_ENV !== 'production') {\n    if (duplicateFlipIds.length) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `[react-flip-toolkit]\\nThere are currently multiple elements with the same flipId on the page.\\nThe animation will only work if each Flipped component has a unique flipId.\\nDuplicate flipId${\n          duplicateFlipIds.length > 1 ? 's' : ''\n        }: ${duplicateFlipIds.join('\\n')}`\n      )\n    }\n  }\n\n  const flipDataArray: FlipDataArray = flippedIds\n\n    // take all the measurements we need\n    // and return an object with animation functions + necessary data\n    .map(id => {\n      const prevRect = flippedElementPositionsBeforeUpdate[id].rect\n      const currentRect = flippedElementPositionsAfterUpdate[id].rect\n      const prevOpacity = flippedElementPositionsBeforeUpdate[id].opacity\n      const currentOpacity = flippedElementPositionsAfterUpdate[id].opacity\n      const needsForcedMinVals = currentRect.width < 1 || currentRect.height < 1\n      const element = flippedElementPositionsAfterUpdate[id].element\n\n      // don't animate elements outside of the user's viewport\n      if (!rectInViewport(prevRect) && !rectInViewport(currentRect)) {\n        return false\n      }\n\n      // this might happen if we are rapidly adding & removing elements(?)\n      if (!element) {\n        return false\n      }\n\n      const flipConfig = extractFlipConfig(element)\n\n      const springConfig = getSpringConfig({\n        flipperSpring: spring,\n        flippedSpring: flipConfig.spring\n      })\n\n      const stagger =\n        flipConfig.stagger === true ? 'default' : flipConfig.stagger\n\n      const toReturn = {\n        element,\n        id,\n        stagger,\n        springConfig\n      }\n\n      if (flipCallbacks[id] && flipCallbacks[id].shouldFlip) {\n        const elementShouldFlip = flipCallbacks[id].shouldFlip!(\n          decisionData.previous,\n          decisionData.current\n        )\n        if (!elementShouldFlip) {\n          return false\n        }\n      }\n\n      // don't animate elements that didn't visibly change\n      // but possibly animate their children\n\n      const translateXDifference = Math.abs(prevRect.left - currentRect.left)\n      const translateYDifference = Math.abs(prevRect.top - currentRect.top)\n\n      const translateDifference = translateXDifference + translateYDifference\n\n      const scaleXDifference = Math.abs(prevRect.width - currentRect.width)\n      const scaleYDifference = Math.abs(prevRect.height - currentRect.height)\n\n      const scaleDifference = scaleXDifference + scaleYDifference\n\n      const opacityDifference = Math.abs(currentOpacity - prevOpacity)\n      const differenceTooSmall =\n        translateDifference < 0.5 &&\n        scaleDifference < 0.5 &&\n        opacityDifference < 0.01\n\n      const hiddenDueToDimensions =\n        (prevRect.height === 0 && currentRect.height === 0) ||\n        (prevRect.width === 0 && currentRect.width === 0)\n      if (hiddenDueToDimensions || differenceTooSmall) {\n        return false\n      }\n\n      const currentTransform = Rematrix.parse(\n        flippedElementPositionsAfterUpdate[id].transform\n      )\n\n      const toVals: AnimatedVals = { matrix: currentTransform }\n\n      const fromVals: AnimatedVals = { matrix: [] }\n      const transformsArray = [currentTransform]\n\n      // we're only going to animate the values that the child wants animated\n      if (flipConfig.translate) {\n        transformsArray.push(\n          Rematrix.translateX(prevRect.left - currentRect.left)\n        )\n        transformsArray.push(\n          Rematrix.translateY(prevRect.top - currentRect.top)\n        )\n      }\n      // going any smaller than 1px breaks transitions in Chrome\n      if (flipConfig.scale) {\n        transformsArray.push(\n          Rematrix.scaleX(\n            Math.max(prevRect.width, 1) / Math.max(currentRect.width, 1)\n          )\n        )\n        transformsArray.push(\n          Rematrix.scaleY(\n            Math.max(prevRect.height, 1) / Math.max(currentRect.height, 1)\n          )\n        )\n      }\n\n      if (flipConfig.opacity) {\n        fromVals.opacity = prevOpacity\n        toVals.opacity = currentOpacity\n      }\n\n      let invertedChildren: InvertedChildren = []\n\n      if (\n        !flipCallbacks[id] ||\n        !flipCallbacks[id].shouldInvert ||\n        flipCallbacks[id].shouldInvert!(\n          decisionData.previous,\n          decisionData.current\n        )\n      ) {\n        const invertedChildElements = getInvertedChildren(element, id)\n        invertedChildren = invertedChildElements.map(c => [\n          c,\n          extractFlipConfig(c)\n        ]) as InvertedChildren\n      }\n\n      fromVals.matrix = convertMatrix3dArrayTo2dArray(\n        transformsArray.reduce(Rematrix.multiply)\n      )\n\n      toVals.matrix = convertMatrix3dArrayTo2dArray(toVals.matrix)\n\n      const applyStyles = createApplyStylesFunc({\n        element,\n        invertedChildren,\n        body\n      })\n\n      let onComplete: () => void\n      if (flipCallbacks[id] && flipCallbacks[id].onComplete) {\n        // must cache or else this could cause an error\n        const cachedOnComplete = flipCallbacks[id].onComplete\n        onComplete = () => cachedOnComplete!(element, decisionData)\n      }\n\n      // this should be called when animation ends naturally\n      // but also when it is interrupted\n      // when it is called, the animation has already been cancelled\n      const onAnimationEnd = (isCancellation: boolean) => {\n        delete inProgressAnimations[id]\n        if (isFunction(onComplete)) {\n          onComplete()\n        }\n        // remove identity transform -- this should have no effect on layout\n        element.style.transform = ''\n        invertedChildren.forEach(([element]) => {\n          element.style.transform = ''\n        })\n        if (needsForcedMinVals && element) {\n          element.style.minHeight = ''\n          element.style.minWidth = ''\n        }\n        if (isCancellation) return\n\n        completedAnimationIds.push(id)\n\n        if (completedAnimationIds.length >= flipDataArray.length) {\n          // we can theoretically call multiple times since a promise only resolves 1x\n          // but that shouldnt happen\n          closureResolve(completedAnimationIds)\n        }\n      }\n\n      const animateOpacity =\n        isNumber(fromVals.opacity) &&\n        isNumber(toVals.opacity) &&\n        fromVals.opacity !== toVals.opacity\n\n      let onStartCalled = false\n\n      const getOnUpdateFunc: GetOnUpdateFunc = ({ spring, onAnimationEnd }) => {\n        inProgressAnimations[id] = {\n          destroy: spring.destroy.bind(spring),\n          onAnimationEnd\n        }\n        const onUpdate: OnUpdate = spring => {\n          if (flipCallbacks[id] && flipCallbacks[id].onSpringUpdate) {\n            flipCallbacks[id].onSpringUpdate!(spring.getCurrentValue())\n          }\n          // trigger the user provided onStart function\n          if (!onStartCalled) {\n            onStartCalled = true\n            if (flipCallbacks[id] && flipCallbacks[id].onStart) {\n              flipCallbacks[id].onStart!(element, decisionData)\n            }\n          }\n\n          const currentValue = spring.getCurrentValue()\n          if (!body.contains(element)) {\n            spring.destroy()\n            return\n          }\n\n          const vals: AnimatedVals = { matrix: [] }\n\n          vals.matrix = fromVals.matrix.map((fromVal, index) =>\n            tweenProp(fromVal, toVals.matrix[index], currentValue)\n          )\n\n          if (animateOpacity) {\n            vals.opacity = tweenProp(\n              fromVals.opacity!,\n              toVals.opacity!,\n              currentValue\n            )\n          }\n          applyStyles(vals)\n        }\n        return onUpdate\n      }\n\n      const initializeFlip: InitializeFlip = () => {\n        // before animating, immediately apply FLIP styles to prevent flicker\n        applyStyles({\n          matrix: fromVals.matrix,\n          opacity: animateOpacity ? fromVals.opacity : undefined,\n          forceMinVals: needsForcedMinVals\n        })\n\n        if (flipCallbacks[id] && flipCallbacks[id].onStartImmediate) {\n          flipCallbacks[id].onStartImmediate!(element, decisionData)\n        }\n        // and batch any other style updates if necessary\n        if (flipConfig.transformOrigin) {\n          element.style.transformOrigin = flipConfig.transformOrigin\n        } else if (applyTransformOrigin) {\n          element.style.transformOrigin = '0 0'\n        }\n\n        invertedChildren.forEach(([child, childFlipConfig]) => {\n          if (childFlipConfig.transformOrigin) {\n            child.style.transformOrigin = childFlipConfig.transformOrigin\n          } else if (applyTransformOrigin) {\n            child.style.transformOrigin = '0 0'\n          }\n        })\n      }\n\n      return assign({}, toReturn, {\n        stagger,\n        springConfig,\n        getOnUpdateFunc,\n        initializeFlip,\n        onAnimationEnd,\n        delayUntil: flipConfig.delayUntil\n      }) as FlipData\n    })\n    // filter out data for all non-animated elements first\n    .filter(Boolean) as FlipDataArray\n\n  flipDataArray.forEach(({ initializeFlip }) => initializeFlip())\n\n  if (debug) {\n    return () => {}\n  }\n\n  const elementIsFlipped = (flipId: FlipId) =>\n    flipDataArray.filter(f => f.id === flipId).length\n\n  const delayedFlip = flipDataArray.filter(\n    f => f.delayUntil && elementIsFlipped(f.delayUntil)\n  )\n\n  // key: flipId value: flip to delay until key is called\n  const delayUntilSprings = {} as IndexableObject\n  // key: flipId value: stagger to delay until key is called\n  const delayUntilStaggers = {} as IndexableObject\n  // key: stagger value: true\n  const delayedStaggerKeys = {} as IndexableObject\n\n  delayedFlip.forEach(flip => {\n    if (flip.stagger) {\n      delayedStaggerKeys[flip.stagger] = true\n      if (delayUntilStaggers[flip.delayUntil!])\n        delayUntilStaggers[flip.delayUntil!].push(flip.stagger)\n      else delayUntilStaggers[flip.delayUntil!] = [flip.stagger]\n    } else {\n      if (delayUntilSprings[flip.delayUntil!])\n        delayUntilSprings[flip.delayUntil!].push(flip)\n      else delayUntilSprings[flip.delayUntil!] = [flip]\n    }\n  })\n\n  const staggerDict = flipDataArray\n    .filter(flipData => flipData.stagger)\n    .reduce((acc, curr) => {\n      if (acc[curr.stagger]) {\n        acc[curr.stagger].push(curr)\n      } else {\n        acc[curr.stagger] = [curr]\n      }\n      return acc\n    }, {} as IndexableObject)\n\n  const immediateFlip = flipDataArray.filter(f => delayedFlip.indexOf(f) === -1)\n\n  immediateFlip.forEach(flipData => {\n    flipData.onSpringActivate = () => {\n      if (delayUntilSprings[flipData.id]) {\n        delayUntilSprings[flipData.id].forEach(createSpring)\n      }\n      if (delayUntilStaggers[flipData.id]) {\n        const uniqueStaggerKeys = Object.keys(\n          delayUntilStaggers[flipData.id].reduce(\n            (acc: IndexableObject, curr: string) =>\n              assign(acc, { [curr]: true }),\n            {}\n          )\n        )\n        uniqueStaggerKeys.forEach((staggerKey: string) => {\n          createStaggeredSprings(\n            staggerDict[staggerKey],\n            staggerConfig[staggerKey]\n          )\n        })\n      }\n    }\n  })\n\n  return () => {\n    // if there are no active FLIP animations, immediately resolve the\n    // returned promise\n    if (!flipDataArray.length) {\n      closureResolve([])\n    }\n    // animate non-staggered elements\n    immediateFlip\n      .filter(flipData => {\n        return !flipData.stagger\n      })\n      .forEach(createSpring)\n\n    // animate staggered elements\n    Object.keys(staggerDict).forEach(staggerKey => {\n      if (delayedStaggerKeys[staggerKey]) return\n      createStaggeredSprings(staggerDict[staggerKey], staggerConfig[staggerKey])\n    })\n    return flipCompletedPromise\n  }\n}\n","import { toArray, assign } from '../../utilities'\nimport * as constants from '../../constants'\nimport { BoundingClientRect } from './types'\n\nexport const addTupleToObject = <T>(\n  acc: Record<string, T>,\n  curr: [string, T]\n): Record<string, T> => assign(acc, { [curr[0]]: curr[1] })\n\nexport const getAllElements = (\n  element?: HTMLElement,\n  portalKey?: string\n): HTMLElement[] => {\n  if (portalKey) {\n    return toArray(\n      document.querySelectorAll(`[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]`)\n    )\n  } else {\n    return toArray(element!.querySelectorAll(`[${constants.DATA_FLIP_ID}]`))\n  }\n}\nexport const getRects = (\n  flippedElements: HTMLElement[]\n): [HTMLElement, BoundingClientRect][] => {\n  return flippedElements.map(\n    (child: HTMLElement): [HTMLElement, BoundingClientRect] => [\n      child,\n      child.getBoundingClientRect()\n    ]\n  )\n}\n","import animateUnflippedElements from './animateUnflippedElements'\nimport animateFlippedElements from './animateFlippedElements'\nimport getFlippedElementPositionsAfterUpdate from './getFlippedElementPositions/getFlippedElementPositionsAfterUpdate'\nimport * as constants from '../constants'\nimport { assign, toArray } from '../utilities'\nimport {\n  GetElement,\n  BaseFlipArgs,\n  OnFlipKeyUpdateArgs,\n  FlippedIds\n} from './types'\nimport { AnimateUnflippedElementsArgs } from './animateUnflippedElements/types'\nimport {\n  AnimateFlippedElementsArgs,\n  ScopedSelector\n} from './animateFlippedElements/types'\n\nconst createPortalScopedSelector =\n  (portalKey: string) => (selector: string) => {\n    return toArray(\n      document.querySelectorAll(\n        `[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]${selector}`\n      )\n    )\n  }\nconst createFlipperScopedSelector = (containerEl: HTMLElement) => {\n  const tempFlipperId = Math.random().toFixed(5)\n  containerEl.dataset.flipperId = tempFlipperId\n\n  return (selector: string) => {\n    return toArray(\n      containerEl.querySelectorAll(\n        `[data-flipper-id=\"${tempFlipperId}\"] ${selector}`\n      )\n    )\n  }\n}\nconst createScopedSelector = ({\n  containerEl,\n  portalKey\n}: {\n  containerEl?: HTMLElement\n  portalKey?: string\n}): ScopedSelector => {\n  if (portalKey) {\n    return createPortalScopedSelector(portalKey)\n  } else if (containerEl) {\n    return createFlipperScopedSelector(containerEl)\n  } else {\n    return () => []\n  }\n}\n\nconst createGetElementFunc = (scopedSelector: ScopedSelector): GetElement => {\n  return (id: string) => {\n    return scopedSelector(`[${constants.DATA_FLIP_ID}=\"${id}\"]`)[0]\n  }\n}\n\nconst onFlipKeyUpdate = ({\n  cachedOrderedFlipIds = [],\n  inProgressAnimations = {},\n  flippedElementPositionsBeforeUpdate = {},\n  flipCallbacks = {},\n  containerEl,\n  applyTransformOrigin,\n  spring,\n  debug,\n  portalKey,\n  staggerConfig = {},\n  decisionData = {},\n  handleEnterUpdateDelete,\n  onComplete,\n  onStart\n}: OnFlipKeyUpdateArgs) => {\n  const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)')\n  if (mediaQuery.matches) return\n  const flippedElementPositionsAfterUpdate =\n    getFlippedElementPositionsAfterUpdate({\n      element: containerEl,\n      portalKey\n    })\n\n  const scopedSelector = createScopedSelector({\n    containerEl,\n    portalKey\n  })\n  const getElement = createGetElementFunc(scopedSelector)\n\n  const isFlipped = (id: string) =>\n    flippedElementPositionsBeforeUpdate[id] &&\n    flippedElementPositionsAfterUpdate[id]\n\n  const unflippedIds = Object.keys(flippedElementPositionsBeforeUpdate)\n    .concat(Object.keys(flippedElementPositionsAfterUpdate))\n    .filter(id => !isFlipped(id))\n\n  const baseArgs: BaseFlipArgs = {\n    flipCallbacks,\n    getElement,\n    flippedElementPositionsBeforeUpdate,\n    flippedElementPositionsAfterUpdate,\n    inProgressAnimations,\n    decisionData\n  }\n\n  const animateUnFlippedElementsArgs = assign({}, baseArgs, {\n    unflippedIds\n  }) as AnimateUnflippedElementsArgs\n\n  const {\n    hideEnteringElements,\n    animateEnteringElements,\n    animateExitingElements\n  } = animateUnflippedElements(animateUnFlippedElementsArgs)\n\n  const flippedIds: FlippedIds = cachedOrderedFlipIds.filter(isFlipped)\n  // @ts-ignore\n  const animateFlippedElementsArgs: AnimateFlippedElementsArgs = assign(\n    {},\n    baseArgs,\n    {\n      containerEl,\n      flippedIds,\n      applyTransformOrigin,\n      spring,\n      debug,\n      staggerConfig,\n      scopedSelector,\n      onComplete\n    }\n  )\n  if (onStart) onStart(containerEl, decisionData)\n\n  // the function handles putting flipped elements back in their original positions\n  // and returns another function to actually call the flip animation\n  const flip = animateFlippedElements(animateFlippedElementsArgs)\n\n  if (handleEnterUpdateDelete) {\n    handleEnterUpdateDelete({\n      hideEnteringElements,\n      animateEnteringElements,\n      animateExitingElements,\n      animateFlippedElements: flip\n    })\n  } else {\n    hideEnteringElements()\n    animateExitingElements().then(animateEnteringElements)\n    flip()\n  }\n}\n\nexport default onFlipKeyUpdate\n","import { addTupleToObject, getRects, getAllElements } from '../utilities'\nimport {\n  FlippedElementPositionsAfterUpdate,\n  FlippedElementPositionDatumAfterUpdate\n} from './types'\n\nconst getFlippedElementPositionsAfterUpdate = ({\n  element,\n  portalKey\n}: {\n  element: HTMLElement\n  portalKey?: string\n}): FlippedElementPositionsAfterUpdate => {\n  const positionArray = getRects(getAllElements(element, portalKey)).map(\n    ([child, childBCR]) => {\n      const computedStyle = window.getComputedStyle(child)\n      return [\n        child.dataset.flipId,\n        {\n          element: child,\n          rect: childBCR,\n          opacity: parseFloat(computedStyle.opacity!),\n          transform: computedStyle.transform\n        }\n      ]\n    }\n  ) as [string, FlippedElementPositionDatumAfterUpdate][]\n\n  return positionArray.reduce(addTupleToObject, {})\n}\n\nexport default getFlippedElementPositionsAfterUpdate\n","import { AnimateUnflippedElementsArgs, FragmentTuple } from './types'\n\nconst animateUnflippedElements = ({\n  unflippedIds,\n  flipCallbacks,\n  getElement,\n  flippedElementPositionsBeforeUpdate,\n  flippedElementPositionsAfterUpdate,\n  inProgressAnimations,\n  decisionData\n}: AnimateUnflippedElementsArgs) => {\n  const enteringElementIds = unflippedIds.filter(\n    id => flippedElementPositionsAfterUpdate[id]\n  )\n  const animatedEnteringElementIds = enteringElementIds.filter(\n    id => flipCallbacks[id] && flipCallbacks[id].onAppear\n  )\n\n  const animatedExitingElementIds = unflippedIds.filter(\n    id =>\n      flippedElementPositionsBeforeUpdate[id] &&\n      flipCallbacks[id] &&\n      flipCallbacks[id].onExit\n  )\n\n  const hideEnteringElements = () => {\n    animatedEnteringElementIds.forEach(id => {\n      const element = getElement(id)\n      if (element) {\n        element.style.opacity = '0'\n      }\n    })\n  }\n\n  const animateEnteringElements = () => {\n    animatedEnteringElementIds.forEach((id, i) => {\n      const element = getElement(id)\n      if (element) {\n        flipCallbacks[id].onAppear!(element, i, decisionData)\n      }\n    })\n  }\n\n  let closureResolve: () => void\n\n  const promiseToReturn: Promise<void> = new Promise(resolve => {\n    closureResolve = resolve\n  })\n\n  const fragmentTuples: FragmentTuple[] = []\n  let exitingElementCount = 0\n\n  const onExitCallbacks = animatedExitingElementIds.map((id, i) => {\n    const {\n      domDataForExitAnimations: {\n        element,\n        parent,\n        childPosition: { top, left, width, height }\n      }\n    } = flippedElementPositionsBeforeUpdate[id]\n    // insert back into dom\n    if (getComputedStyle(parent).position === 'static') {\n      parent.style.position = 'relative'\n    }\n    element.style.transform = 'matrix(1, 0, 0, 1, 0, 0)'\n    element.style.position = 'absolute'\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n    // taken out of the dom flow, the element might have lost these dimensions\n    element.style.height = height + 'px'\n    element.style.width = width + 'px'\n    let fragmentTuple: FragmentTuple | undefined = fragmentTuples.filter(\n      t => t[0] === parent\n    )[0]\n    if (!fragmentTuple) {\n      fragmentTuple = [parent, document.createDocumentFragment()]\n      fragmentTuples.push(fragmentTuple)\n    }\n    fragmentTuple[1].appendChild(element)\n\n    exitingElementCount += 1\n\n    const stop = () => {\n      try {\n        parent.removeChild(element)\n      } catch (DOMException) {\n        // the element is already gone\n      } finally {\n        exitingElementCount -= 1\n        if (exitingElementCount === 0) {\n          closureResolve()\n        }\n      }\n    }\n    // @ts-ignore\n    inProgressAnimations[id] = { stop }\n    return () => flipCallbacks[id].onExit!(element, i, stop, decisionData)\n  })\n\n  // now append all the fragments from the onExit callbacks\n  // (we use fragments for performance)\n  fragmentTuples.forEach(t => {\n    t[0].appendChild(t[1])\n  })\n\n  if (!onExitCallbacks.length) {\n    closureResolve!()\n  }\n\n  const animateExitingElements = () => {\n    onExitCallbacks.forEach(c => c())\n    return promiseToReturn\n  }\n\n  return {\n    hideEnteringElements,\n    animateEnteringElements,\n    animateExitingElements\n  }\n}\n\nexport default animateUnflippedElements\n","import { addTupleToObject, getAllElements, getRects } from '../utilities'\nimport * as constants from '../../../constants'\nimport { toArray, assign } from '../../../utilities'\nimport {\n  FlippedElementPositionsBeforeUpdateReturnVals,\n  FlippedElementPositionDatumBeforeUpdate,\n  GetFlippedElementPositionsBeforeUpdateArgs,\n  ParentBCRs,\n  ChildIdsToParentBCRs,\n  ChildIdsToParents\n} from './types'\nimport { InProgressAnimations } from '../../../types'\n\nexport const cancelInProgressAnimations = (\n  inProgressAnimations: InProgressAnimations,\n  animatingElements: HTMLElement[]\n) => {\n  Object.keys(inProgressAnimations).forEach(id => {\n    if (inProgressAnimations[id].destroy) {\n      inProgressAnimations[id].destroy!()\n    }\n    if (inProgressAnimations[id].onAnimationEnd) {\n      inProgressAnimations[id].onAnimationEnd!(true)\n    }\n    delete inProgressAnimations[id]\n  })\n  animatingElements.forEach(el => {\n    el.style.transform = ''\n    el.style.opacity = ''\n  })\n}\n\nconst getFlippedElementPositionsBeforeUpdate = ({\n  element,\n  flipCallbacks = {},\n  inProgressAnimations = {},\n  portalKey\n}: GetFlippedElementPositionsBeforeUpdateArgs): FlippedElementPositionsBeforeUpdateReturnVals => {\n  const flippedElements = getAllElements(element, portalKey)\n\n  const inverseFlippedElements = toArray(\n    element.querySelectorAll(`[${constants.DATA_INVERSE_FLIP_ID}]`)\n  )\n\n  const childIdsToParentBCRs: ChildIdsToParentBCRs = {}\n  const parentBCRs: ParentBCRs = []\n  const childIdsToParents: ChildIdsToParents = {}\n  // this is for exit animations so we can re-insert exiting elements in the\n  // DOM later\n  flippedElements\n    .filter(\n      el =>\n        flipCallbacks &&\n        flipCallbacks[el.dataset.flipId!] &&\n        flipCallbacks[el.dataset.flipId!].onExit\n    )\n    .forEach(el => {\n      let parent = el.parentNode as HTMLElement\n      // this won't work for IE11\n      if (el.closest) {\n        const exitContainer = el.closest(\n          `[${constants.DATA_EXIT_CONTAINER}]`\n        ) as HTMLElement\n        if (exitContainer) {\n          parent = exitContainer\n        }\n      }\n      let bcrIndex = parentBCRs.findIndex(n => n[0] === parent)\n      if (bcrIndex === -1) {\n        parentBCRs.push([parent, parent.getBoundingClientRect()])\n        bcrIndex = parentBCRs.length - 1\n      }\n      childIdsToParentBCRs[el.dataset.flipId!] = parentBCRs[bcrIndex][1]\n      childIdsToParents[el.dataset.flipId!] = parent\n    })\n\n  const filteredFlippedElements = getRects(flippedElements)\n\n  const flippedElementPositionsTupleArray: [\n    string,\n    FlippedElementPositionDatumBeforeUpdate\n  ][] = filteredFlippedElements.map(([child, childBCR]) => {\n    const domDataForExitAnimations = {}\n\n    // only cache extra data for exit animations\n    // if the element has an onExit listener\n    if (\n      flipCallbacks &&\n      flipCallbacks[child.dataset.flipId!] &&\n      flipCallbacks[child.dataset.flipId!].onExit\n    ) {\n      const parentBCR = childIdsToParentBCRs[child.dataset.flipId!]\n\n      assign(domDataForExitAnimations, {\n        element: child,\n        parent: childIdsToParents[child.dataset.flipId!],\n        childPosition: {\n          top: childBCR.top - parentBCR.top,\n          left: childBCR.left - parentBCR.left,\n          width: childBCR.width,\n          height: childBCR.height\n        }\n      })\n    }\n\n    return [\n      child.dataset.flipId!,\n      {\n        rect: childBCR,\n        opacity: parseFloat(window.getComputedStyle(child).opacity || '1'),\n        domDataForExitAnimations\n      }\n    ]\n  }) as [string, FlippedElementPositionDatumBeforeUpdate][]\n\n  const flippedElementPositions = flippedElementPositionsTupleArray.reduce(\n    addTupleToObject,\n    {}\n  )\n\n  // do this at the very end since we want to cache positions of elements\n  // while they are mid-transition\n  cancelInProgressAnimations(\n    inProgressAnimations,\n    flippedElements.concat(inverseFlippedElements)\n  )\n\n  return {\n    flippedElementPositions,\n    cachedOrderedFlipIds: filteredFlippedElements.map(\n      ([el]) => el.dataset.flipId!\n    )\n  }\n}\n\nexport default getFlippedElementPositionsBeforeUpdate\n","import onFlipKeyUpdate from './flip'\nimport getFlippedElementPositionsBeforeUpdate from './flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate'\nimport { assign } from './utilities'\nimport {\n  StaggerConfig,\n  HandleEnterUpdateDelete,\n  InProgressAnimations,\n  FlipCallbacks,\n  OnFlipperComplete,\n  FlippedProps,\n  OnFlipperStart\n} from './types'\nimport { SpringOption } from './springSettings/types'\nimport { FlippedElementPositionsBeforeUpdate } from './flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/types'\nimport { FlippedIds } from './flip/types'\n\ninterface Options {\n  element: HTMLElement\n  staggerConfig?: StaggerConfig\n  spring?: SpringOption\n  applyTransformOrigin?: boolean\n  handleEnterUpdateDelete?: HandleEnterUpdateDelete\n  debug?: boolean\n  onStart?: OnFlipperStart\n  onComplete?: OnFlipperComplete\n}\n\nclass Flipper {\n  private element!: HTMLElement\n  private staggerConfig!: StaggerConfig\n  private applyTransformOrigin = true\n  private handleEnterUpdateDelete!: HandleEnterUpdateDelete\n  private debug?: boolean\n  private spring!: SpringOption\n  private inProgressAnimations: InProgressAnimations\n  private flipCallbacks: FlipCallbacks\n  private snapshot?: {\n    flippedElementPositions: FlippedElementPositionsBeforeUpdate\n    cachedOrderedFlipIds: FlippedIds\n  }\n  private onComplete?: OnFlipperComplete\n  private onStart?: OnFlipperStart\n\n  constructor(options: Options) {\n    assign(this, options)\n\n    this.inProgressAnimations = {}\n    this.flipCallbacks = {}\n\n    this.recordBeforeUpdate = this.recordBeforeUpdate.bind(this)\n    this.update = this.update.bind(this)\n    this.addFlipped = this.addFlipped.bind(this)\n    this.addInverted = this.addInverted.bind(this)\n  }\n\n  recordBeforeUpdate() {\n    this.snapshot = getFlippedElementPositionsBeforeUpdate({\n      element: this.element,\n      flipCallbacks: this.flipCallbacks,\n      inProgressAnimations: this.inProgressAnimations\n    })\n  }\n  update(prevDecisionData: any, currentDecisionData: any) {\n    if (this.snapshot) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate:\n          this.snapshot.flippedElementPositions,\n        cachedOrderedFlipIds: this.snapshot.cachedOrderedFlipIds,\n        containerEl: this.element,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.applyTransformOrigin,\n        spring: this.spring,\n        debug: this.debug,\n        staggerConfig: this.staggerConfig,\n        handleEnterUpdateDelete: this.handleEnterUpdateDelete,\n        decisionData: {\n          previous: prevDecisionData,\n          current: currentDecisionData\n        },\n        onComplete: this.onComplete,\n        onStart: this.onStart\n      })\n      delete this.snapshot\n    }\n  }\n\n  addFlipped({\n    element,\n    flipId,\n    opacity,\n    translate,\n    scale,\n    transformOrigin,\n    spring,\n    stagger,\n    delayUntil,\n    onAppear,\n    onStart,\n    onSpringUpdate,\n    onComplete,\n    onExit,\n    shouldFlip,\n    shouldInvert\n  }: FlippedProps & { element: HTMLElement }) {\n    if (!element) {\n      throw new Error('no element provided')\n    }\n    if (!flipId) {\n      throw new Error('No flipId provided')\n    }\n    const flipConfig = {\n      scale,\n      translate,\n      opacity,\n      transformOrigin,\n      spring,\n      stagger,\n      delayUntil\n    }\n    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\n      assign(flipConfig, {\n        translate: true,\n        scale: true,\n        opacity: true\n      })\n    }\n    if (flipId) {\n      element.dataset.flipId = String(flipId)\n    }\n    element.dataset.flipConfig = JSON.stringify(flipConfig)\n    // finally, add callbacks\n    this.flipCallbacks[flipId] = {\n      shouldFlip,\n      shouldInvert,\n      onAppear,\n      onStart,\n      onSpringUpdate,\n      onComplete,\n      onExit\n    }\n  }\n\n  addInverted({\n    element,\n    parent,\n    opacity,\n    translate,\n    scale,\n    transformOrigin\n  }: {\n    element: HTMLElement\n    parent: HTMLElement\n    opacity: boolean\n    translate: boolean\n    scale: boolean\n    transformOrigin: string\n  }) {\n    if (!element) {\n      throw new Error('no element provided')\n    }\n    if (!parent) {\n      throw new Error('parent must be provided')\n    }\n\n    const inverseFlipId = parent.dataset.flipId\n    const flipConfig = {\n      scale,\n      translate,\n      opacity,\n      transformOrigin\n    }\n    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\n      assign(flipConfig, {\n        translate: true,\n        scale: true,\n        opacity: true\n      })\n    }\n    element.dataset.inverseFlipId = inverseFlipId\n    element.dataset.flipConfig = JSON.stringify(flipConfig)\n  }\n}\n\nexport default Flipper\n","// this is exclusively for users of the library to create their own enter + exit animations\nimport { SpringSystem } from '../forked-rebound'\nimport { SpringSystemInterface } from '../forked-rebound/types.d'\nimport { tweenProp, assign } from '../utilities'\nimport { normalizeSpring, springPresets } from '../springSettings'\nimport { SimpleSpringOptions } from './types'\nimport { SpringConfig } from '../springSettings/types'\n\n// this should get created only 1x\nconst springSystem: SpringSystemInterface = new SpringSystem()\n\n/**\n * A simple spring function for animating DOM properties.\n * Returns a function that will immediately cancel the in-progress animation.\n * */\nconst createSimpleSpring = ({\n  config,\n  values,\n  onUpdate,\n  delay = 0,\n  onComplete\n}: SimpleSpringOptions) => {\n  const { stiffness, damping, overshootClamping } = assign(\n    {},\n    springPresets.noWobble,\n    normalizeSpring(config)\n  ) as SpringConfig\n  const spring = springSystem.createSpring(stiffness!, damping!)\n  spring.setOvershootClampingEnabled(!!overshootClamping)\n  spring.addListener({\n    onSpringAtRest: spring => {\n      if (onComplete) onComplete()\n      spring.destroy()\n    },\n    onSpringUpdate: spring => {\n      const springVal = spring.getCurrentValue()\n      if (!values) return onUpdate(springVal)\n      const currentValues = Object.keys(values)\n        .map(value => [\n          value,\n          tweenProp(values[value][0], values[value][1], springVal)\n        ])\n        .reduce((acc, curr) => {\n          return Object.assign(acc, { [curr[0]]: curr[1] })\n        }, {})\n      onUpdate(currentValues)\n    }\n  })\n  if (delay) {\n    setTimeout(() => {\n      spring.setEndValue(1)\n    }, delay)\n  } else {\n    spring.setEndValue(1)\n  }\n  return spring\n}\n\nexport default createSimpleSpring\n"],"names":["isNumber","x","isFunction","isObject","Object","prototype","toString","call","toArray","arrayLike","Array","slice","apply","getDuplicateValsAsStrings","arr","obj","reduce","acc","curr","keys","filter","val","assign","target","arguments","forEach","arg","nextKey","hasOwnProperty","_onFrame","tweenProp","start","end","position","DATA_FLIP_ID","DATA_INVERSE_FLIP_ID","DATA_PORTAL_KEY","DATA_EXIT_CONTAINER","springPresets","noWobble","stiffness","damping","gentle","veryGentle","wobbly","stiff","normalizeSpring","spring","indexOf","window","requestAnimationFrame","callback","setTimeout","Date","now","performanceNow","performance","removeFirst","array","item","idx","splice","AnimationLooper","_proto","run","_this","onFrame","springSystem","loop","PhysicsState","this","velocity","ID","SOLVER_TIMESTEP_SEC","Spring","_id","_springSystem","listeners","_startValue","_currentState","_displacementFromRestThreshold","_endValue","_overshootClampingEnabled","_previousState","_restSpeedThreshold","_tempState","_timeAccumulator","_wasAtRest","_cachedSpringConfig","getId","destroy","deregisterSpring","setSpringConfig","springConfig","_springConfig","getCurrentValue","getDisplacementDistanceForState","state","Math","abs","setEndValue","endValue","prevEndValue","isAtRest","activateSpring","i","len","length","onChange","onSpringEndStateChange","setVelocity","setCurrentValue","currentValue","listener","onSpringUpdate","setAtRest","setOvershootClampingEnabled","enabled","isOvershooting","tension","advance","time","realDeltaTime","adjustedDeltaTime","aVelocity","aAcceleration","bVelocity","bAcceleration","cVelocity","cAcceleration","friction","tempPosition","tempVelocity","_interpolate","notifyActivate","notifyAtRest","notifyPositionUpdated","_this2","Boolean","onSpringActivate","_onActivateCalled","onSpringAtRest","systemShouldAdvance","wasAtRest","alpha","addListener","newListener","push","addOneTimeListener","key","func","removeListener","listenerToRemove","SpringSystem","looper","_activeSprings","_idleSpringIndices","_isIdle","_lastTimeMillis","_springRegistry","createSpring","createSpringWithConfig","registerSpring","getIsIdle","deltaTime","pop","currentTimeMillis","ellapsedMillis","onBeforeIntegrate","onAfterIntegrate","springId","createSuspendedSpring","flipData","_flipData$springConfi","overshootClamping","getOnUpdateFunc","onAnimationEnd","flipped","createStaggeredSprings","flippedArray","staggerConfig","reverse","speedConfig","normalizedSpeed","speed","min","max","nextThreshold","setEndValueFuncs","map","cachedGetOnUpdate","args","onUpdate","bind","convertMatrix3dArrayTo2dArray","matrix","index","rectInViewport","_ref5","top","innerHeight","bottom","left","innerWidth","right","extractFlipConfig","element","JSON","parse","dataset","flipConfig","addTupleToObject","_assign","getAllElements","portalKey","document","querySelectorAll","constants","getRects","flippedElements","child","getBoundingClientRect","onFlipKeyUpdate","_ref2","_ref2$cachedOrderedFl","cachedOrderedFlipIds","_ref2$inProgressAnima","inProgressAnimations","_ref2$flippedElementP","flippedElementPositionsBeforeUpdate","_ref2$flipCallbacks","flipCallbacks","containerEl","applyTransformOrigin","debug","_ref2$staggerConfig","_ref2$decisionData","decisionData","handleEnterUpdateDelete","onComplete","onStart","matchMedia","matches","_ref","flippedElementPositionsAfterUpdate","childBCR","computedStyle","getComputedStyle","flipId","rect","opacity","parseFloat","transform","scopedSelector","selector","createPortalScopedSelector","tempFlipperId","random","toFixed","flipperId","createFlipperScopedSelector","createScopedSelector","getElement","id","createGetElementFunc","isFlipped","unflippedIds","concat","baseArgs","_animateUnflippedElem","closureResolve","animatedEnteringElementIds","onAppear","animatedExitingElementIds","onExit","promiseToReturn","Promise","resolve","fragmentTuples","exitingElementCount","onExitCallbacks","_flippedElementPositi","domDataForExitAnimations","parent","_flippedElementPositi2","childPosition","width","height","style","fragmentTuple","t","createDocumentFragment","appendChild","stop","removeChild","DOMException","hideEnteringElements","animateEnteringElements","animateExitingElements","c","animateUnflippedElements","animateFlippedElementsArgs","flippedIds","flip","_ref6","_ref6$staggerConfig","_ref6$decisionData","flipCompletedPromise","then","completedAnimationIds","firstElement","body","ownerDocument","querySelector","flipDataArray","prevRect","currentRect","prevOpacity","currentOpacity","needsForcedMinVals","_temp","flippedSpring","flipperSpring","stagger","toReturn","shouldFlip","previous","current","translateDifference","scaleDifference","opacityDifference","currentTransform","Rematrix","toVals","fromVals","transformsArray","translate","translateX","translateY","scale","scaleX","scaleY","invertedChildren","shouldInvert","invertedChildElements","getInvertedChildren","multiply","applyStyles","_ref3","_ref4","forceMinVals","minHeight","minWidth","stringTransform","join","convertMatrix2dArrayToString","childFlipConfig","contains","inverseVals","transformString","invertTransformsForChildren","createApplyStylesFunc","cachedOnComplete","animateOpacity","onStartCalled","_ref8","vals","fromVal","initializeFlip","undefined","onStartImmediate","transformOrigin","_ref9","isCancellation","_ref7","delayUntil","_ref10","delayedFlip","f","delayUntilSprings","delayUntilStaggers","delayedStaggerKeys","staggerDict","immediateFlip","staggerKey","animateFlippedElements","getFlippedElementPositionsBeforeUpdate","_ref$flipCallbacks","_ref$inProgressAnimat","inverseFlippedElements","childIdsToParentBCRs","parentBCRs","childIdsToParents","el","parentNode","closest","exitContainer","bcrIndex","findIndex","n","filteredFlippedElements","flippedElementPositions","parentBCR","animatingElements","cancelInProgressAnimations","Flipper","options","snapshot","recordBeforeUpdate","update","addFlipped","addInverted","prevDecisionData","currentDecisionData","Error","String","stringify","inverseFlipId","values","_ref$delay","delay","config","springVal","currentValues","value","_Object$assign"],"mappings":"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"}